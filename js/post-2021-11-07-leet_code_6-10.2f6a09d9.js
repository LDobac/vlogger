(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["post-2021-11-07-leet_code_6-10"],{"09f0":function(s){s.exports=JSON.parse('{"content":"<h2 id=\\"leetcode---6-zigzag-conversion\\">LeetCode - 6. Zigzag Conversion</h2>\\n<p>문제 - <a href=\\"https://leetcode.com/problems/zigzag-conversion/\\">LeetCode 6. Zigzag Conversion</a></p>\\n<h2 id=\\"문제-설명\\">문제 설명</h2>\\n<p>지그재그 변환은 문자열을 지그재그로 변환하는 문제입니다.</p>\\n<p>예를 들어 문자열 <code>HELLOWORLD</code>가 있다면</p>\\n<pre><code>H     W\\nE   W O\\nL O   R D\\nL     L\\n</code></pre>\\n<p>와 같이 변환하여 최종적으로 <code>HWEWOLORDLL</code>로 변환하는게 목표입니다.</p>\\n<p>난이도는 <code>MEDIUM</code> 난이도 입니다.</p>\\n<h2 id=\\"풀이\\">풀이</h2>\\n<h3 id=\\"solution\\">Solution</h3>\\n<p>제가 풀이한 방법은 지그재그의 규칙을 찾아 수식으로 계산하는 방법을 이용하였습니다.</p>\\n<p><img src=\\"/assets/images/leet_code/6/example.png\\" alt=\\"example equation\\"></p>\\n<p>문자열을 Row가 3, 4, 5일때 열 인덱스를 초록색으로 표시하였고, 빨간색 숫자로 일반 문자열의 인덱스를 표현하였다.</p>\\n<p>첫 번째 열과 마지막 열의 문자열의 인덱스는 row + (numOfRow - 1)*2로 표현할 수 있다</p>\\n<p>그리고 중간 열에는 무조건 중간에 문자가 하나씩 존재한다. 중간에 위치한 문자의 인덱스는 (row + (numOfRow - 1)*2) - ((row-1)*2)로 표현할 수 있다.</p>\\n<h4 id=\\"제출-결과\\">제출 결과</h4>\\n<p><img src=\\"/assets/images/leet_code/6/result_1.png\\" alt=\\"Solution 1 result\\"></p>\\n<p>12ms의 실행 속도가 나왔으며, 다른 C++ 제출자에 비해 약 60%가량 좋은 성능을 보이게 되었다.</p>\\n<details>\\n<summary>코드 전문</summary>\\n    \\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;string&gt;</span></span>\\n\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Solution</span> \\n{\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\">std::string <span class=\\"hljs-title\\">convert</span><span class=\\"hljs-params\\">(std::string s, <span class=\\"hljs-type\\">int</span> numRows)</span> \\n    </span>{\\n        <span class=\\"hljs-keyword\\">if</span> (numRows &lt;= <span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-keyword\\">return</span> s;\\n        \\n        <span class=\\"hljs-type\\">bool</span> middle = <span class=\\"hljs-literal\\">false</span>;\\n        <span class=\\"hljs-type\\">int</span> curRow = <span class=\\"hljs-number\\">0</span>;\\n        <span class=\\"hljs-type\\">int</span> i = <span class=\\"hljs-number\\">0</span>;\\n        std::string result = <span class=\\"hljs-string\\">&quot;&quot;</span>;\\n\\n        <span class=\\"hljs-keyword\\">while</span> (result.<span class=\\"hljs-built_in\\">size</span>() != s.<span class=\\"hljs-built_in\\">size</span>())\\n        {\\n            <span class=\\"hljs-type\\">int</span> index = curRow + (i * ((numRows - <span class=\\"hljs-number\\">1</span>) * <span class=\\"hljs-number\\">2</span>));\\n\\n            <span class=\\"hljs-keyword\\">if</span> (curRow % (numRows - <span class=\\"hljs-number\\">1</span>) != <span class=\\"hljs-number\\">0</span>)\\n            {\\n                <span class=\\"hljs-keyword\\">if</span> (middle)\\n                {\\n                    index -= (curRow * <span class=\\"hljs-number\\">2</span>);\\n                    i--;\\n                    middle = <span class=\\"hljs-literal\\">false</span>;\\n                }\\n                <span class=\\"hljs-keyword\\">else</span>\\n                {\\n                    middle = <span class=\\"hljs-literal\\">true</span>;\\n                }\\n            }\\n\\n            <span class=\\"hljs-keyword\\">if</span> (index &gt;= s.<span class=\\"hljs-built_in\\">size</span>())\\n            {\\n                curRow++;\\n                middle = <span class=\\"hljs-literal\\">false</span>;\\n                i = <span class=\\"hljs-number\\">0</span>;\\n\\n                <span class=\\"hljs-keyword\\">continue</span>;\\n            }\\n\\n            result += s[index];\\n\\n            i++;\\n        }\\n\\n        <span class=\\"hljs-keyword\\">return</span> result;\\n    }\\n};\\n</code></pre>\\n</details>\\n"}')}}]);
//# sourceMappingURL=post-2021-11-07-leet_code_6-10.2f6a09d9.js.map
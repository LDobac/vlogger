"use strict";(self["webpackChunkvlogger"]=self["webpackChunkvlogger"]||[]).push([[605],{6778:function(s){s.exports=JSON.parse('{"content":"<h2 id=\\"leetcode---13-roman-to-integer\\">LeetCode - 13. Roman to Integer</h2>\\n<p>문제 - <a href=\\"https://leetcode.com/problems/roman-to-integer/\\">LeetCode 13. Roman to Integer</a></p>\\n<h2 id=\\"문제-설명\\">문제 설명</h2>\\n<p>지난 12번 문제와 유사한 문제로 이번에는 로마자 숫자에서 정수형 숫자로 변환하는 문제입니다.</p>\\n<p>난이도는 <code>EASY</code> 난이도 입니다.</p>\\n<h2 id=\\"풀이\\">풀이</h2>\\n<h3 id=\\"solution---1\\">Solution - 1</h3>\\n<p>로마자 숫자를 정수로 바꾸는 방법은 매우 쉽게 유도가능합니다.</p>\\n<p>첫 번째로 각 로마자 심볼들은 정해진 값이 있습니다. 해당 값을 1:1로 매칭하기 위해서 std::map STL 자료형을 사용합니다.</p>\\n<p>두 번째로 4, 9와 같은 문자는 IV, IX와 같이 5, 10을 나타내는 심볼 앞에 1을 나타내는 심볼이 붙어서 나오게됩니다. 그리고 로마자 숫자를 살펴보면 4, 9와 같은 경우를 제외하고 작은 크기의 심볼이 큰 숫자보다 앞에 오는 경우가 없습니다.</p>\\n<p>예를 들어 <code>LVIII</code>라는 값은 58로 L은 50, V는 5, I는 1입니다. <code>MCMXCIV</code>은 1994로 M은 1000, CM은 900, XC는 90, IV는 4입니다.</p>\\n<p>이렇듯 4, 9를 제외한 모든 심볼은 항상 내림차순으로 표현됩니다. 이 점을 유의해서 코드를 작성합니다.</p>\\n<h4 id=\\"제출-결과\\">제출 결과</h4>\\n<p><img src=\\"/assets/images/leet_code/13/result_1.webp\\" alt=\\"Solution 1 result\\"></p>\\n<p>실행 속도는 12ms로 다른 C++ 제출자에 비해 60% 가량의 성능밖에 되지 않습니다.</p>\\n<p>추측하컨데 아마도 std::map STL 자료형을 사용하면서 메모리 생성 과정과 접근 과정에서 많은 시간을 소요하고 있다는 생각이 듭니다.</p>\\n<details>\\n<summary>코드 전문</summary>\\n    \\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;string&gt;</span></span>\\n<span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;map&gt;</span></span>\\n\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Solution</span> \\n{\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-type\\">int</span> <span class=\\"hljs-title\\">romanToInt</span><span class=\\"hljs-params\\">(std::string s)</span> \\n    </span>{\\n        <span class=\\"hljs-type\\">int</span> result = <span class=\\"hljs-number\\">0</span>;\\n\\n        <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> i = <span class=\\"hljs-number\\">0</span>; i &lt; s.<span class=\\"hljs-built_in\\">size</span>(); i++)\\n        {\\n            result += symbols[s[i]];\\n\\n            <span class=\\"hljs-keyword\\">if</span> (i - <span class=\\"hljs-number\\">1</span> &gt;= <span class=\\"hljs-number\\">0</span> &amp;&amp; symbols[s[i]] &gt; symbols[s[i - <span class=\\"hljs-number\\">1</span>]])\\n            {\\n                result -= (symbols[s[i - <span class=\\"hljs-number\\">1</span>]] * <span class=\\"hljs-number\\">2</span>);\\n            }\\n        }\\n        \\n        <span class=\\"hljs-keyword\\">return</span> result;\\n    }\\n\\n<span class=\\"hljs-keyword\\">private</span>:\\n    std::map&lt;<span class=\\"hljs-type\\">char</span>, <span class=\\"hljs-type\\">int</span>&gt; symbols {\\n        std::<span class=\\"hljs-built_in\\">make_pair</span>(<span class=\\"hljs-string\\">&#x27;I&#x27;</span>, <span class=\\"hljs-number\\">1</span>), std::<span class=\\"hljs-built_in\\">make_pair</span>(<span class=\\"hljs-string\\">&#x27;V&#x27;</span>, <span class=\\"hljs-number\\">5</span>), \\n        std::<span class=\\"hljs-built_in\\">make_pair</span>(<span class=\\"hljs-string\\">&#x27;X&#x27;</span>, <span class=\\"hljs-number\\">10</span>), std::<span class=\\"hljs-built_in\\">make_pair</span>(<span class=\\"hljs-string\\">&#x27;L&#x27;</span>, <span class=\\"hljs-number\\">50</span>), \\n        std::<span class=\\"hljs-built_in\\">make_pair</span>(<span class=\\"hljs-string\\">&#x27;C&#x27;</span>, <span class=\\"hljs-number\\">100</span>), std::<span class=\\"hljs-built_in\\">make_pair</span>(<span class=\\"hljs-string\\">&#x27;D&#x27;</span>, <span class=\\"hljs-number\\">500</span>),\\n        std::<span class=\\"hljs-built_in\\">make_pair</span>(<span class=\\"hljs-string\\">&#x27;M&#x27;</span>, <span class=\\"hljs-number\\">1000</span>)\\n    };\\n};\\n</code></pre>\\n</details>\\n\\n<h3 id=\\"solution---2\\">Solution - 2</h3>\\n<p>방법 1은 std::map을 이용해 로마자 숫자를 정수형으로 변환했지만, 해당 부분을 삭제하고 switch문 하드 코딩으로 바꿔서 실행해보겠습니다.</p>\\n<h4 id=\\"제출-결과-1\\">제출 결과</h4>\\n<p><img src=\\"/assets/images/leet_code/13/result_2.webp\\" alt=\\"Solution 1 result\\"></p>\\n<p>실행 속도는 4ms로 기존의 12ms보다 향상됨을 확인할 수 있습니다.</p>\\n<p>기존의 std::map을 이용한 메모리 접근 대신 switch문을 이용해 하드 코딩으로 실행하여 기존에 비해 높은 실행 속도를 얻을 수 있었습니다.</p>\\n<details>\\n<summary>코드 전문</summary>\\n    \\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;string&gt;</span></span>\\n<span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;map&gt;</span></span>\\n\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Solution</span> \\n{\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-type\\">int</span> <span class=\\"hljs-title\\">romanToInt</span><span class=\\"hljs-params\\">(std::string s)</span> \\n    </span>{\\n        <span class=\\"hljs-type\\">int</span> result = <span class=\\"hljs-number\\">0</span>;\\n\\n        <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> i = <span class=\\"hljs-number\\">0</span>; i &lt; s.<span class=\\"hljs-built_in\\">size</span>(); i++)\\n        {\\n            <span class=\\"hljs-keyword\\">switch</span>(s[i])\\n            {\\n                <span class=\\"hljs-keyword\\">case</span> <span class=\\"hljs-string\\">&#x27;M&#x27;</span>: \\n                    result += <span class=\\"hljs-number\\">1000</span>;\\n                    <span class=\\"hljs-keyword\\">break</span>;\\n                <span class=\\"hljs-keyword\\">case</span> <span class=\\"hljs-string\\">&#x27;D&#x27;</span>:\\n                    result += <span class=\\"hljs-number\\">500</span>;\\n                    <span class=\\"hljs-keyword\\">break</span>;\\n                <span class=\\"hljs-keyword\\">case</span> <span class=\\"hljs-string\\">&#x27;C&#x27;</span>:\\n                    <span class=\\"hljs-keyword\\">if</span> ((s[i+<span class=\\"hljs-number\\">1</span>] == <span class=\\"hljs-string\\">&#x27;D&#x27;</span>) || (s[i+<span class=\\"hljs-number\\">1</span>] == <span class=\\"hljs-string\\">&#x27;M&#x27;</span>)) result -= <span class=\\"hljs-number\\">100</span>;\\n                    <span class=\\"hljs-keyword\\">else</span> result += <span class=\\"hljs-number\\">100</span>;\\n                    <span class=\\"hljs-keyword\\">break</span>;\\n                <span class=\\"hljs-keyword\\">case</span> <span class=\\"hljs-string\\">&#x27;L&#x27;</span>:\\n                    result += <span class=\\"hljs-number\\">50</span>;\\n                    <span class=\\"hljs-keyword\\">break</span>;\\n                <span class=\\"hljs-keyword\\">case</span> <span class=\\"hljs-string\\">&#x27;X&#x27;</span>:\\n                    <span class=\\"hljs-keyword\\">if</span> ((s[i+<span class=\\"hljs-number\\">1</span>] == <span class=\\"hljs-string\\">&#x27;L&#x27;</span>) || (s[i+<span class=\\"hljs-number\\">1</span>] == <span class=\\"hljs-string\\">&#x27;C&#x27;</span>)) result -= <span class=\\"hljs-number\\">10</span>;\\n                    <span class=\\"hljs-keyword\\">else</span> result += <span class=\\"hljs-number\\">10</span>;\\n                    <span class=\\"hljs-keyword\\">break</span>;\\n                <span class=\\"hljs-keyword\\">case</span> <span class=\\"hljs-string\\">&#x27;V&#x27;</span>:\\n                    result += <span class=\\"hljs-number\\">5</span>;\\n                    <span class=\\"hljs-keyword\\">break</span>;\\n                <span class=\\"hljs-keyword\\">case</span> <span class=\\"hljs-string\\">&#x27;I&#x27;</span>:\\n                    <span class=\\"hljs-keyword\\">if</span> ((s[i+<span class=\\"hljs-number\\">1</span>] == <span class=\\"hljs-string\\">&#x27;V&#x27;</span>) || (s[i+<span class=\\"hljs-number\\">1</span>] == <span class=\\"hljs-string\\">&#x27;X&#x27;</span>)) result -= <span class=\\"hljs-number\\">1</span>;\\n                    <span class=\\"hljs-keyword\\">else</span> result += <span class=\\"hljs-number\\">1</span>;\\n                    <span class=\\"hljs-keyword\\">break</span>;\\n            }\\n        }\\n        \\n        <span class=\\"hljs-keyword\\">return</span> result;\\n    }\\n};\\n</code></pre>\\n</details>\\n"}')}}]);
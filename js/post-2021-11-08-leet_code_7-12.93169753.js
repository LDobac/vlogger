(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["post-2021-11-08-leet_code_7-12"],{"5f26":function(s){s.exports=JSON.parse('{"content":"<h2 id=\\"leetcode---7-reverse-integer\\">LeetCode - 7. Reverse Integer</h2>\\n<p>문제 - <a href=\\"https://leetcode.com/problems/reverse-integer/\\">LeetCode 7. Reverse Integer</a></p>\\n<h2 id=\\"문제-설명\\">문제 설명</h2>\\n<p>정수 123이 주어진다면 321로, -123이 주어진다면 -321, 1200이 주어진다면 21로 변환하는 문제입니다.</p>\\n<p>난이도는 <code>MEDIUM</code> 난이도 입니다.</p>\\n<h2 id=\\"풀이\\">풀이</h2>\\n<h3 id=\\"solution\\">Solution</h3>\\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-keyword\\">while</span> (x != <span class=\\"hljs-number\\">0</span>)\\n{   \\n    <span class=\\"hljs-keyword\\">if</span> (result &gt; (INT_MAX / <span class=\\"hljs-number\\">10</span>)) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>;\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span> (result &lt; (INT_MIN / <span class=\\"hljs-number\\">10</span>)) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>;\\n\\n    result *= <span class=\\"hljs-number\\">10</span>;\\n    result += (x % <span class=\\"hljs-number\\">10</span>);\\n\\n    x /= <span class=\\"hljs-number\\">10</span>;\\n}\\n</code></pre>\\n<p>단순히 입력 값 x의 나머지를 result에 더하고 다음 순회시 result에 10을 곱하여 변환하는 방식을 사용했습니다.</p>\\n<p>입력값은 <code>int</code> 타입이므로 32bit 크기의 자료형이기 때문에 만약 입력값이 뒤집었을 때 <code>int</code> 자료형의 크기가 넘을 경우 0을 반환하는 예외 처리를 수행합니다.</p>\\n<p>이번 문제에서는 <code>INT_MAX</code>의 값을 이용해 <code>int</code> 타입의 범위를 검사하였지만, <code>long</code>과 같이 <code>int</code>타입보다 더 큰 자료형을 이용한다면 별도의 예외 처리가 필요하지 않습니다.</p>\\n<h4 id=\\"제출-결과\\">제출 결과</h4>\\n<p><img src=\\"/assets/images/leet_code/7/result.png\\" alt=\\"Solution 1 result\\"></p>\\n<p>0ms의 실행결과가 나왔으며, 다른 C++ 제출자에 비해 100% 좋은 성능이 보임을 확인할 수 있습니다.</p>\\n<details>\\n<summary>코드 전문</summary>\\n    \\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;cmath&gt;</span></span>\\n<span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;climits&gt;</span></span>\\n\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Solution</span> \\n{\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-type\\">int</span> <span class=\\"hljs-title\\">reverse</span><span class=\\"hljs-params\\">(<span class=\\"hljs-type\\">int</span> x)</span> \\n    </span>{\\n        <span class=\\"hljs-keyword\\">if</span> (x == <span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-keyword\\">return</span> x;\\n\\n        <span class=\\"hljs-type\\">int</span> result = <span class=\\"hljs-number\\">0</span>;\\n\\n        <span class=\\"hljs-keyword\\">while</span> (x != <span class=\\"hljs-number\\">0</span>)\\n        {   \\n            <span class=\\"hljs-keyword\\">if</span> (result &gt; (INT_MAX / <span class=\\"hljs-number\\">10</span>)) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>;\\n            <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span> (result &lt; (INT_MIN / <span class=\\"hljs-number\\">10</span>)) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>;\\n\\n            result *= <span class=\\"hljs-number\\">10</span>;\\n            result += (x % <span class=\\"hljs-number\\">10</span>);\\n\\n            x /= <span class=\\"hljs-number\\">10</span>;\\n        }\\n\\n        <span class=\\"hljs-keyword\\">return</span> result;\\n    }\\n};\\n</code></pre>\\n</details>\\n"}')}}]);
//# sourceMappingURL=post-2021-11-08-leet_code_7-12.93169753.js.map
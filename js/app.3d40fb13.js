(function(s){function n(n){for(var t,e,c=n[0],r=n[1],o=n[2],i=0,d=[];i<c.length;i++)e=c[i],Object.prototype.hasOwnProperty.call(l,e)&&l[e]&&d.push(l[e][0]),l[e]=0;for(t in r)Object.prototype.hasOwnProperty.call(r,t)&&(s[t]=r[t]);u&&u(n);while(d.length)d.shift()();return p.push.apply(p,o||[]),a()}function a(){for(var s,n=0;n<p.length;n++){for(var a=p[n],t=!0,e=1;e<a.length;e++){var c=a[e];0!==l[c]&&(t=!1)}t&&(p.splice(n--,1),s=r(r.s=a[0]))}return s}var t={},e={app:0},l={app:0},p=[];function c(s){return r.p+"js/"+({post_view:"post_view"}[s]||s)+"."+{post_view:"319a52a4"}[s]+".js"}function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return s[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.e=function(s){var n=[],a={post_view:1};e[s]?n.push(e[s]):0!==e[s]&&a[s]&&n.push(e[s]=new Promise((function(n,a){for(var t="css/"+({post_view:"post_view"}[s]||s)+"."+{post_view:"bbaf5dcc"}[s]+".css",l=r.p+t,p=document.getElementsByTagName("link"),c=0;c<p.length;c++){var o=p[c],i=o.getAttribute("data-href")||o.getAttribute("href");if("stylesheet"===o.rel&&(i===t||i===l))return n()}var d=document.getElementsByTagName("style");for(c=0;c<d.length;c++){o=d[c],i=o.getAttribute("data-href");if(i===t||i===l)return n()}var u=document.createElement("link");u.rel="stylesheet",u.type="text/css",u.onload=n,u.onerror=function(n){var t=n&&n.target&&n.target.src||l,p=new Error("Loading CSS chunk "+s+" failed.\n("+t+")");p.code="CSS_CHUNK_LOAD_FAILED",p.request=t,delete e[s],u.parentNode.removeChild(u),a(p)},u.href=l;var h=document.getElementsByTagName("head")[0];h.appendChild(u)})).then((function(){e[s]=0})));var t=l[s];if(0!==t)if(t)n.push(t[2]);else{var p=new Promise((function(n,a){t=l[s]=[n,a]}));n.push(t[2]=p);var o,i=document.createElement("script");i.charset="utf-8",i.timeout=120,r.nc&&i.setAttribute("nonce",r.nc),i.src=c(s);var d=new Error;o=function(n){i.onerror=i.onload=null,clearTimeout(u);var a=l[s];if(0!==a){if(a){var t=n&&("load"===n.type?"missing":n.type),e=n&&n.target&&n.target.src;d.message="Loading chunk "+s+" failed.\n("+t+": "+e+")",d.name="ChunkLoadError",d.type=t,d.request=e,a[1](d)}l[s]=void 0}};var u=setTimeout((function(){o({type:"timeout",target:i})}),12e4);i.onerror=i.onload=o,document.head.appendChild(i)}return Promise.all(n)},r.m=s,r.c=t,r.d=function(s,n,a){r.o(s,n)||Object.defineProperty(s,n,{enumerable:!0,get:a})},r.r=function(s){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(s,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(s,"__esModule",{value:!0})},r.t=function(s,n){if(1&n&&(s=r(s)),8&n)return s;if(4&n&&"object"===typeof s&&s&&s.__esModule)return s;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:s}),2&n&&"string"!=typeof s)for(var t in s)r.d(a,t,function(n){return s[n]}.bind(null,t));return a},r.n=function(s){var n=s&&s.__esModule?function(){return s["default"]}:function(){return s};return r.d(n,"a",n),n},r.o=function(s,n){return Object.prototype.hasOwnProperty.call(s,n)},r.p="/",r.oe=function(s){throw console.error(s),s};var o=window["webpackJsonp"]=window["webpackJsonp"]||[],i=o.push.bind(o);o.push=n,o=o.slice();for(var d=0;d<o.length;d++)n(o[d]);var u=i;p.push([0,"chunk-vendors"]),a()})({0:function(s,n,a){s.exports=a("cd49")},"0e31":function(s,n,a){},"14b9":function(s){s.exports=JSON.parse('[{"uid":1,"title":"LeetCode - 1. Two Sum","summery":"","thumbnail":"","date":"2021-10-24T22:10:27.000+00:00","series":1,"tags":[1,2,3],"originFile":"2021-10-24-leet_code_1.md","htmlFileName":"2021-10-24-leet_code_1.json","htmlFilePath":"/home/runner/work/vlogger/vlogger/src/assets/.build/build_posts/2021-10-24-leet_code_1.json","mtime":1635341238920.2444},{"uid":2,"title":"LeetCode - 2. Add Two Numbers","summery":"","thumbnail":"","date":"2021-10-26T22:21:00.000+00:00","series":1,"tags":[1,4,3],"originFile":"2021-10-26-leet_code_2.md","htmlFileName":"2021-10-26-leet_code_2.json","htmlFilePath":"/home/runner/work/vlogger/vlogger/src/assets/.build/build_posts/2021-10-26-leet_code_2.json","mtime":1635341238920.2444},{"uid":3,"title":"LeetCode - 3. Longest Substring Without Repeating Characters","summery":"","thumbnail":"","date":"2021-10-27T21:47:50.000+00:00","series":1,"tags":[1,4,3],"originFile":"2021-10-27-leet_code_3.md","htmlFileName":"2021-10-27-leet_code_3.json","htmlFilePath":"/home/runner/work/vlogger/vlogger/src/assets/.build/build_posts/2021-10-27-leet_code_3.json","mtime":1635341238920.2444}]')},"1b53":function(s,n,a){},"1d16":function(s,n,a){},"2b22":function(s,n,a){"use strict";a("6683")},3617:function(s,n,a){"use strict";a.d(n,"c",(function(){return y})),a.d(n,"b",(function(){return k})),a.d(n,"d",(function(){return F})),a.d(n,"a",(function(){return E}));var t=a("7a23"),e=a("ea47"),l=a.n(e),p=Object(t["F"])("data-v-447bff31");Object(t["t"])("data-v-447bff31");var c={class:"header"},r=Object(t["g"])("div",{class:"profile-image"},[Object(t["g"])("img",{src:l.a,alt:"My Profile Image"})],-1),o={class:"title"},i=Object(t["f"])(" Jaehee "),d=Object(t["g"])("p",{class:"description"}," HI! ",-1),u={class:"nav-menu"},h=Object(t["f"])("Home"),j=Object(t["f"])("About"),b=Object(t["g"])("a",{href:"https://github.com/LDobac",target:"_blank",class:"nav-item"},"Github",-1),g=Object(t["g"])("a",{href:"https://www.instagram.com/jaehee24_/",target:"_blank",class:"nav-item"},"Instagram",-1);Object(t["r"])();var m=p((function(s,n,a,e,l,m){var f=Object(t["y"])("router-link");return Object(t["q"])(),Object(t["d"])("header",c,[r,Object(t["g"])("h1",o,[Object(t["g"])(f,{to:"/"},{default:p((function(){return[i]})),_:1}),d]),Object(t["g"])("nav",u,[Object(t["g"])(f,{to:"/",class:"nav-item"},{default:p((function(){return[h]})),_:1}),Object(t["g"])(f,{to:"/about",class:"nav-item"},{default:p((function(){return[j]})),_:1}),b,g])])})),f=Object(t["h"])({name:"Header",setup:function(){}});a("4adc");f.render=m,f.__scopeId="data-v-447bff31";var y=f,O=Object(t["F"])("data-v-3a4c6208");Object(t["t"])("data-v-3a4c6208");var w={class:"footer"};Object(t["r"])();var v=O((function(s,n,a,e,l,p){return Object(t["q"])(),Object(t["d"])("footer",w," Copyright 2021 by Jaehee All rights reserved. ")})),_=Object(t["h"])({name:"Footer"});a("59e6");_.render=v,_.__scopeId="data-v-3a4c6208";var k=_,L=a("e1c4"),x=a.n(L),N=Object(t["F"])("data-v-41258d0c");Object(t["t"])("data-v-41258d0c");var S={class:"side-menu"},q=Object(t["g"])("div",{class:"card"},[Object(t["g"])("p",null,"아직 별 넣을 내용이 없읍니다."),Object(t["g"])("br"),Object(t["g"])("p",null,"귀여운 저희 집 고양이나 봐주세요"),Object(t["g"])("img",{src:x.a})],-1);Object(t["r"])();var M=N((function(s,n,a,e,l,p){return Object(t["q"])(),Object(t["d"])("aside",S,[q])})),P=Object(t["h"])({name:"LeftSideMenu"});a("adc8");P.render=M,P.__scopeId="data-v-41258d0c";var F=P,C=Object(t["F"])("data-v-41965791");Object(t["t"])("data-v-41965791");var I={class:"date"};Object(t["r"])();var z=C((function(s,n,a,e,l,p){return Object(t["q"])(),Object(t["d"])("p",I,"📅 "+Object(t["A"])(s.formattedDate),1)})),A=a("5a0c"),T=a.n(A),B=Object(t["h"])({name:"FormattedDate",props:{date:{type:[String,Object]}},setup:function(s){var n=Object(t["B"])(s),a=n.date,e=Object(t["b"])((function(){return"string"==typeof a.value?T()(a.value).format("YYYY년 MM월 DD일"):a.value.format("YYYY년 MM월 DD일")}));return{formattedDate:e}}});a("b4fe");B.render=z,B.__scopeId="data-v-41965791";var E=B},3715:function(s,n,a){"use strict";a("3d3e")},"3d3e":function(s,n,a){},"3e94":function(s,n,a){s.exports=a.p+"img/귀여운_고양이_2.7dda7633.jpg"},"4adc":function(s,n,a){"use strict";a("67b6")},"4eaf":function(s,n,a){"use strict";a("0e31")},"58a7":function(s,n,a){"use strict";a.d(n,"a",(function(){return c}));var t=a("7a23");function e(s,n,a,e,l,p){var c=Object(t["y"])("LeftSideMenu");return Object(t["q"])(),Object(t["d"])(t["a"],null,[Object(t["g"])(c),Object(t["x"])(s.$slots,"default")],64)}var l=a("3617"),p=Object(t["h"])({name:"ContentWithSideMenuLayout",components:{LeftSideMenu:l["d"]}});p.render=e;var c=p},5938:function(s,n,a){"use strict";a("9c2e")},"59e6":function(s,n,a){"use strict";a("793b")},"5e6b":function(s,n,a){},6683:function(s,n,a){},"67b6":function(s,n,a){},"6bc8":function(s){s.exports=JSON.parse('{"content":"<h2 id=\\"leetcode---3-longest-substring-without-repeating-characters\\">LeetCode - 3. Longest Substring Without Repeating Characters</h2>\\n<p>문제 - <a href=\\"https://leetcode.com/problems/longest-substring-without-repeating-characters/\\">LeetCode 3. Longest Substring Without Repeating Characters</a></p>\\n<h2 id=\\"문제-설명\\">문제 설명</h2>\\n<p>특정 문자열 <code>s</code>가 주어질 때 똑같은 문자를 반복하지 않는, 가장 긴 부분 문자열을 구하는 문제입니다.</p>\\n<p><img src=\\"/assets/images/leet_code/3/exam.png\\" alt=\\"Problem Example\\"></p>\\n<p>만약 입력 문자열이 <code>s = &quot;abcabcbb&quot;</code>라면 반복하는 bb를 제외하고, 반복하지 않는 문자열인 &quot;abc&quot;의 길이인 3이 구해집니다.</p>\\n<p>즉, 부분 문자열에서 동일한 문자가 없는, 가장 긴 길이의 부분 문자열을 구합니다.</p>\\n<p>난이도는 <code>MEDIUM</code> 난이도 입니다.</p>\\n<h2 id=\\"풀이\\">풀이</h2>\\n<h3 id=\\"solution-1---brute-force\\">Solution 1 - Brute force</h3>\\n<p>첫 번째 시도는 무차별 대입을 통한 검사를 진행합니다.</p>\\n<p>만약 s 문자열의 길이가 n이라면 i가 0-&gt;n 일때 i ~ n사이의 부분 문자열을 계속 찾습니다.</p>\\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-function\\"><span class=\\"hljs-type\\">int</span> <span class=\\"hljs-title\\">lengthOfLongestSubstring</span><span class=\\"hljs-params\\">(std::string s)</span> \\n</span>{\\n    <span class=\\"hljs-type\\">int</span> longestLength = <span class=\\"hljs-number\\">0</span>;\\n\\n    <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> i = <span class=\\"hljs-number\\">0</span> ; i &lt; s.<span class=\\"hljs-built_in\\">size</span>() ; i++)\\n    {\\n        <span class=\\"hljs-type\\">int</span> length = <span class=\\"hljs-number\\">0</span>;\\n        <span class=\\"hljs-type\\">int</span> sliceStart = i;\\n\\n        <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> j = i ; j &lt; s.<span class=\\"hljs-built_in\\">size</span>() ; j++)\\n        {\\n            std::string substr = s.<span class=\\"hljs-built_in\\">substr</span>(sliceStart, length);\\n            <span class=\\"hljs-type\\">int</span> pos = substr.<span class=\\"hljs-built_in\\">find_first_of</span>(s.<span class=\\"hljs-built_in\\">at</span>(j));\\n\\n            <span class=\\"hljs-keyword\\">if</span> (pos == std::string::npos)\\n            {\\n                <span class=\\"hljs-comment\\">// Not found</span>\\n                length++;\\n\\n                longestLength = (longestLength &lt; length) ? length : longestLength;\\n            }\\n            <span class=\\"hljs-keyword\\">else</span>\\n            {\\n                <span class=\\"hljs-keyword\\">break</span>;\\n            }\\n        }\\n\\n        <span class=\\"hljs-keyword\\">if</span> (s.<span class=\\"hljs-built_in\\">size</span>() - i &lt; longestLength) <span class=\\"hljs-keyword\\">break</span>;\\n    }\\n\\n    <span class=\\"hljs-keyword\\">return</span> longestLength;\\n}\\n</code></pre>\\n<p>중첩된 반복문을 이용해 모든 경우의 수를 탐색합니다.</p>\\n<p>문자열을 찾는 주요 부분은 내부 반복문이니 내부 반복문만 따로 빼서 확인해보겠습니다.</p>\\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> j = i ; j &lt; s.<span class=\\"hljs-built_in\\">size</span>() ; j++)\\n{\\n    std::string substr = s.<span class=\\"hljs-built_in\\">substr</span>(sliceStart, length);\\n    <span class=\\"hljs-type\\">int</span> pos = substr.<span class=\\"hljs-built_in\\">find_first_of</span>(s.<span class=\\"hljs-built_in\\">at</span>(j));\\n\\n    <span class=\\"hljs-keyword\\">if</span> (pos == std::string::npos)\\n    {\\n        <span class=\\"hljs-comment\\">// Not found</span>\\n        length++;\\n\\n        longestLength = (longestLength &lt; length) ? length : longestLength;\\n    }\\n    <span class=\\"hljs-keyword\\">else</span>\\n    {\\n        <span class=\\"hljs-keyword\\">break</span>;\\n    }\\n}\\n</code></pre>\\n<p>j는 i -&gt; n까지 증가합니다. 문자열 s를 i부터 length 길이만큼 잘라 부분 문자열을 생성합니다. 문자열 s의 j번째 문자를 가져와 현재 부분 문자열에 동일한 문자가 있는지 검사합니다.</p>\\n<p>만약 현재 추출한 부분 문자열에 동일한 문자(중복되는 문자)가 없다면 부분 문자열의 길이를 1 증가합니다.</p>\\n<p>중복된 문자열이 존재하다면 반복문을 탈출합니다.</p>\\n<p>위 반복문을 s문자열의 길이 n번만큼 반복합니다. 즉, O(n^2)의 알고리즘이 됩니다. 추가로 이 코드에서는 문자열을 탐색할 때 라이브러리의 함수를 사용하였지만, 선형 탐색을 통하여 문자열을 탐색한다면 O(n^3)의 알고리즘이 될 수도 있습니다.</p>\\n<h4 id=\\"제출-결과\\">제출 결과</h4>\\n<p><img src=\\"/assets/images/leet_code/3/result_1.png\\" alt=\\"Solution 1 result\\"></p>\\n<p>실행 시간은 628ms, 메모리 사용량은 273.1MB가 나오게 되었습니다. 동일한 C++ 제출자에 비해서 8.92% 정도밖에 빠르지 않은 매우 느린 코드임을 알 수 있습니다.</p>\\n<details>\\n<summary>코드 전문</summary>\\n    \\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;string&gt;</span></span>\\n<span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Solution</span> \\n{\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-type\\">int</span> <span class=\\"hljs-title\\">lengthOfLongestSubstring</span><span class=\\"hljs-params\\">(std::string s)</span> \\n    </span>{\\n        <span class=\\"hljs-type\\">int</span> longestLength = <span class=\\"hljs-number\\">0</span>;\\n\\n        <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> i = <span class=\\"hljs-number\\">0</span> ; i &lt; s.<span class=\\"hljs-built_in\\">size</span>() ; i++)\\n        {\\n            <span class=\\"hljs-type\\">int</span> length = <span class=\\"hljs-number\\">0</span>;\\n            <span class=\\"hljs-type\\">int</span> sliceStart = i;\\n\\n            <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> j = i ; j &lt; s.<span class=\\"hljs-built_in\\">size</span>() ; j++)\\n            {\\n                std::string substr = s.<span class=\\"hljs-built_in\\">substr</span>(sliceStart, length);\\n                <span class=\\"hljs-type\\">int</span> pos = substr.<span class=\\"hljs-built_in\\">find_first_of</span>(s.<span class=\\"hljs-built_in\\">at</span>(j));\\n\\n                <span class=\\"hljs-keyword\\">if</span> (pos == std::string::npos)\\n                {\\n                    <span class=\\"hljs-comment\\">// Not found</span>\\n                    length++;\\n\\n                    longestLength = (longestLength &lt; length) ? length : longestLength;\\n                }\\n                <span class=\\"hljs-keyword\\">else</span>\\n                {\\n                    <span class=\\"hljs-keyword\\">break</span>;\\n                }\\n            }\\n\\n            <span class=\\"hljs-keyword\\">if</span> (s.<span class=\\"hljs-built_in\\">size</span>() - i &lt; longestLength) <span class=\\"hljs-keyword\\">break</span>;\\n        }\\n\\n        <span class=\\"hljs-keyword\\">return</span> longestLength;\\n    }\\n};\\n</code></pre>\\n</details>\\n\\n<h3 id=\\"solution-2---sliding-window\\">Solution 2 - Sliding window</h3>\\n<p>첫 번째 방법의 문제점은 중첩된 반복문을 순회하면서 이미 검사한 문자열을 또 다시 검사하기 때문에 좋은 속도가 나지 않았습니다.</p>\\n<p>아이디어를 살짝 바꾸어서 생각해보겠습니다. 문자열 <code>s = &quot;abcabcbb&quot;</code>가 주어질 때 여기서 중복되지 않는 문자들의 집합인 부분 문자열의 길이가 가장 긴 것을 구하는 것입니다.</p>\\n<p>때문에 부분 문자열이 &quot;abc&quot;이든 &quot;bca&quot;이든 조건을 만족하면서 가장 긴 부분 문자열이 되게 됩니다.</p>\\n<p>문자열을 검사하면서 &quot;abc&quot;에서 &quot;abca&quot;가 되었다면 이때 문자 &quot;a&quot;가 겹치게 되므로 이 문자열은 정답이 될 수 없습니다. 하지만 &quot;abca&quot;를 다시 조건에 맞는 문자열로 바꾸는 방법은 맨 뒤의 &quot;a&quot;를 제거할 수도 있지만, 반대로 맨 처음의 &quot;a&quot;를 제거할 수도 있습니다.</p>\\n<p>즉, &quot;abca&quot; -&gt; &quot;bca&quot;로 변환한다면 조건에 만족하는 문자열이 되게 됩니다. 이때 왼쪽의 index를 <code>left</code>, 오른쪽의 index를 <code>right</code>라 한다면 <code>left</code>를 1 증가시키기만 하면 반복문을 처음부터 순회할 필요 없이 정답에 맞는 조건이 되게 됩니다.</p>\\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-function\\"><span class=\\"hljs-type\\">int</span> <span class=\\"hljs-title\\">lengthOfLongestSubstring</span><span class=\\"hljs-params\\">(std::string s)</span> \\n</span>{\\n    <span class=\\"hljs-keyword\\">if</span> (s.<span class=\\"hljs-built_in\\">size</span>() == <span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>;\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span> (s.<span class=\\"hljs-built_in\\">size</span>() == <span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>;\\n\\n    <span class=\\"hljs-type\\">int</span> longestLength = <span class=\\"hljs-number\\">0</span>;\\n\\n    <span class=\\"hljs-type\\">int</span> left = <span class=\\"hljs-number\\">0</span>;\\n    <span class=\\"hljs-type\\">int</span> right = <span class=\\"hljs-number\\">0</span>;\\n    <span class=\\"hljs-type\\">int</span> length = <span class=\\"hljs-number\\">0</span>;\\n\\n    <span class=\\"hljs-keyword\\">while</span>(right &lt; s.<span class=\\"hljs-built_in\\">size</span>())\\n    {\\n        std::string substr = s.<span class=\\"hljs-built_in\\">substr</span>(left, length);\\n        <span class=\\"hljs-keyword\\">auto</span> pos = substr.<span class=\\"hljs-built_in\\">find_first_of</span>(s.<span class=\\"hljs-built_in\\">at</span>(right));\\n\\n        <span class=\\"hljs-keyword\\">if</span> (pos != std::string::npos)\\n        {\\n            left += (pos + <span class=\\"hljs-number\\">1</span>);\\n        }\\n        \\n        right++;\\n        length = right - left;\\n\\n        longestLength = (longestLength &lt; length) ? length : longestLength;\\n    }\\n\\n    <span class=\\"hljs-keyword\\">return</span> longestLength;\\n}\\n</code></pre>\\n<p>sliding window를 구성하는 left, right 변수를 추가하여 매 순회시 마다 right 즉, window를 늘려갑니다.</p>\\n<p>만약 중복되는 문자열이 부분 문자열 내에 있다면 해당 index(pos)만큼 더하여 window를 줄입니다(sliding).</p>\\n<p>오히려 코드가 훨씬 간단해지고 루프문도 하나로 줄었으니 O(n)정도의 성능을 기대할 수 있을 것 같습니다.</p>\\n<h4 id=\\"제출-결과-1\\">제출 결과</h4>\\n<p><img src=\\"/assets/images/leet_code/3/result_2.png\\" alt=\\"Solution 2 result\\"></p>\\n<p>코드의 실행 속도는 16ms로 향상되었으며 사용 메모리도 11.6MB로 크게 향상되었습니다. 다른 C++ 제출자에 비해서 66.67%의 빠른 성능을 보여줌을 확인할 수 있었습니다.</p>\\n<details>\\n<summary>코드 전문</summary>\\n    \\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Solution</span> \\n{\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-type\\">int</span> <span class=\\"hljs-title\\">lengthOfLongestSubstring</span><span class=\\"hljs-params\\">(std::string s)</span> \\n    </span>{\\n        <span class=\\"hljs-keyword\\">if</span> (s.<span class=\\"hljs-built_in\\">size</span>() == <span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>;\\n        <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span> (s.<span class=\\"hljs-built_in\\">size</span>() == <span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>;\\n\\n        <span class=\\"hljs-type\\">int</span> longestLength = <span class=\\"hljs-number\\">0</span>;\\n\\n        <span class=\\"hljs-type\\">int</span> left = <span class=\\"hljs-number\\">0</span>;\\n        <span class=\\"hljs-type\\">int</span> right = <span class=\\"hljs-number\\">0</span>;\\n        <span class=\\"hljs-type\\">int</span> length = <span class=\\"hljs-number\\">0</span>;\\n\\n        <span class=\\"hljs-keyword\\">while</span>(right &lt; s.<span class=\\"hljs-built_in\\">size</span>())\\n        {\\n            std::string substr = s.<span class=\\"hljs-built_in\\">substr</span>(left, length);\\n            <span class=\\"hljs-keyword\\">auto</span> pos = substr.<span class=\\"hljs-built_in\\">find_first_of</span>(s.<span class=\\"hljs-built_in\\">at</span>(right));\\n\\n            <span class=\\"hljs-keyword\\">if</span> (pos != std::string::npos)\\n            {\\n                left += (pos + <span class=\\"hljs-number\\">1</span>);\\n            }\\n            \\n            right++;\\n            length = right - left;\\n\\n            longestLength = (longestLength &lt; length) ? length : longestLength;\\n        }\\n\\n        <span class=\\"hljs-keyword\\">return</span> longestLength;\\n    }\\n};\\n</code></pre>\\n</details>\\n\\n<h3 id=\\"solution-3---sliding-window-optimized-stdstring\\">Solution 3 - sliding window optimized std::string</h3>\\n<p>2 번째 방법의 경우 <strong>std::string</strong>의 부분 문자열을 구하는 함수인 <strong>substr</strong> 함수를 이용했습니다.</p>\\n<pre><code class=\\"language-c++\\">std::string substr = s.<span class=\\"hljs-built_in\\">substr</span>(left, length);\\n<span class=\\"hljs-keyword\\">auto</span> pos = substr.<span class=\\"hljs-built_in\\">find_first_of</span>(s.<span class=\\"hljs-built_in\\">at</span>(right));\\n</code></pre>\\n<p>위 함수가 현재 상황에서 발생하는 문제점은 <strong>substr</strong>함수는 문자열을 자른 후 새로운 std::string 객체를 생성하여 반환하게 됩니다. 즉 문자열을 자른 후 메모리를 할당하는 과정이 생기기에 overhead가 발생합니다.</p>\\n<p>이러한 문제를 해결하기 위해서 C++ 17부터는 <a href=\\"https://en.cppreference.com/w/cpp/string/basic_string_view\\">std::string_view</a>라는 객체가 도입되었습니다.</p>\\n<p><strong>std::string_view</strong> 객체는 기본적으로 char*의 포인터와 문자열의 길이(size)만 가지는 문자열 객체이며 사실상 char* 타입에 간단한 부분 문자열, 문자열 찾기와 같은 함수만 추가한 객체입니다.</p>\\n<p>객체의 생성, 탐색과 같은 부분이 최소 O(1)에서 O(n)내의 연산으로 이루어져있기 때문에 문자열을 이용해 복잡한 연산이나 변형을 하지 않고 탐색만 한다면 매우 적절한 클래스입니다.</p>\\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-function\\"><span class=\\"hljs-type\\">int</span> <span class=\\"hljs-title\\">lengthOfLongestSubstring</span><span class=\\"hljs-params\\">(std::string s)</span> \\n</span>{\\n    <span class=\\"hljs-keyword\\">if</span> (s.<span class=\\"hljs-built_in\\">size</span>() == <span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>;\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span> (s.<span class=\\"hljs-built_in\\">size</span>() == <span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>;\\n\\n    <span class=\\"hljs-type\\">int</span> longestLength = <span class=\\"hljs-number\\">0</span>;\\n\\n    <span class=\\"hljs-type\\">int</span> left = <span class=\\"hljs-number\\">0</span>;\\n    <span class=\\"hljs-type\\">int</span> right = <span class=\\"hljs-number\\">0</span>;\\n    <span class=\\"hljs-type\\">int</span> length = <span class=\\"hljs-number\\">0</span>;\\n\\n    <span class=\\"hljs-keyword\\">while</span>(right &lt; s.<span class=\\"hljs-built_in\\">size</span>())\\n    {\\n        <span class=\\"hljs-comment\\">// std::string -&gt; std::string_view</span>\\n        <span class=\\"hljs-function\\">std::string_view <span class=\\"hljs-title\\">substr</span><span class=\\"hljs-params\\">(&amp;s[left], length)</span></span>;\\n        <span class=\\"hljs-keyword\\">auto</span> pos = substr.<span class=\\"hljs-built_in\\">find_first_of</span>(s.<span class=\\"hljs-built_in\\">at</span>(right));\\n\\n        <span class=\\"hljs-keyword\\">if</span> (pos != std::string::npos)\\n        {\\n            left += (pos + <span class=\\"hljs-number\\">1</span>);\\n        }\\n        \\n        right++;\\n        length = right - left;\\n\\n        longestLength = (longestLength &lt; length) ? length : longestLength;\\n    }\\n\\n    <span class=\\"hljs-keyword\\">return</span> longestLength;\\n}\\n</code></pre>\\n<p>유일하게 변경된 점은 <strong>std::string</strong> -&gt; <strong>std::string_view</strong>로만 변경되었습니다. 다행히 <strong>std::string_view</strong>클래스도 substr을 지원하기 때문에 간단히 사용 가능합니다.</p>\\n<h4 id=\\"제출-결과-2\\">제출 결과</h4>\\n<p><img src=\\"/assets/images/leet_code/3/result_3.png\\" alt=\\"Solution 3 result\\"></p>\\n<p>실행 시간은 4ms, 메모리는 6.7MB로 다른 방법에 비해서 속도와 메모리가 월등히 향상되었습니다.</p>\\n<p>다른 C++ 제출자에 비해서 96%나 빠른 성능을 보여줌을 확인할 수 있습니다.</p>\\n<details>\\n<summary>코드 전문</summary>\\n    \\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;string&gt;</span></span>\\n<span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;string_view&gt;</span></span>\\n<span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Solution</span> \\n{\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-type\\">int</span> <span class=\\"hljs-title\\">lengthOfLongestSubstring</span><span class=\\"hljs-params\\">(std::string s)</span> \\n    </span>{\\n        <span class=\\"hljs-keyword\\">if</span> (s.<span class=\\"hljs-built_in\\">size</span>() == <span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>;\\n        <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span> (s.<span class=\\"hljs-built_in\\">size</span>() == <span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>;\\n\\n        <span class=\\"hljs-type\\">int</span> longestLength = <span class=\\"hljs-number\\">0</span>;\\n\\n        <span class=\\"hljs-type\\">int</span> left = <span class=\\"hljs-number\\">0</span>;\\n        <span class=\\"hljs-type\\">int</span> right = <span class=\\"hljs-number\\">0</span>;\\n        <span class=\\"hljs-type\\">int</span> length = <span class=\\"hljs-number\\">0</span>;\\n\\n        <span class=\\"hljs-keyword\\">while</span>(right &lt; s.<span class=\\"hljs-built_in\\">size</span>())\\n        {\\n            <span class=\\"hljs-function\\">std::string_view <span class=\\"hljs-title\\">substr</span><span class=\\"hljs-params\\">(&amp;s[left], length)</span></span>;\\n            <span class=\\"hljs-keyword\\">auto</span> pos = substr.<span class=\\"hljs-built_in\\">find_first_of</span>(s.<span class=\\"hljs-built_in\\">at</span>(right));\\n\\n            <span class=\\"hljs-keyword\\">if</span> (pos != std::string::npos)\\n            {\\n                left += (pos + <span class=\\"hljs-number\\">1</span>);\\n            }\\n            \\n            right++;\\n            length = right - left;\\n\\n            longestLength = (longestLength &lt; length) ? length : longestLength;\\n        }\\n\\n        <span class=\\"hljs-keyword\\">return</span> longestLength;\\n    }\\n};\\n</code></pre>\\n</details>"}')},"793b":function(s,n,a){},"7e73":function(s,n,a){"use strict";a.d(n,"c",(function(){return r})),a.d(n,"a",(function(){return h})),a.d(n,"b",(function(){return v}));a("b0c0");var t=a("7a23"),e=Object(t["F"])("data-v-61c7223c");Object(t["t"])("data-v-61c7223c");var l={class:"tags-wrap"};Object(t["r"])();var p=e((function(s,n,a,p,c,r){var o=Object(t["y"])("router-link");return Object(t["q"])(),Object(t["d"])("div",l,[(Object(t["q"])(!0),Object(t["d"])(t["a"],null,Object(t["w"])(s.tags,(function(s){return Object(t["q"])(),Object(t["d"])(o,{class:"rounded-button tag",key:s.id,to:{path:"/",query:{tag:s.id}}},{default:e((function(){return[Object(t["f"])(" # "+Object(t["A"])(s.name),1)]})),_:2},1032,["to"])})),128))])})),c=Object(t["h"])({name:"TagsView",props:{tags:{type:Object}},setup:function(){var s=function(s){console.log(s)};return{onButtonClick:s}}});a("5938");c.render=p,c.__scopeId="data-v-61c7223c";var r=c,o=Object(t["F"])("data-v-52d68690");Object(t["t"])("data-v-52d68690");var i={key:0,class:"series-wrap"};Object(t["r"])();var d=o((function(s,n,a,e,l,p){var c=Object(t["y"])("router-link");return s.series?(Object(t["q"])(),Object(t["d"])("span",i,[Object(t["g"])(c,{class:"series",to:{path:"/",query:{series:s.series.id}}},{default:o((function(){return[Object(t["f"])(Object(t["A"])(s.series.name),1)]})),_:1},8,["to"])])):Object(t["e"])("",!0)})),u=Object(t["h"])({props:{series:{type:Object}}});a("2b22");u.render=d,u.__scopeId="data-v-52d68690";var h=u,j=Object(t["F"])("data-v-d6aa614c");Object(t["t"])("data-v-d6aa614c");var b={class:"series-navigator"},g=Object(t["g"])("p",{class:"bold"},"이전",-1),m={key:1},f=Object(t["g"])("p",{class:"bold"},"다음",-1),y={key:3};Object(t["r"])();var O=j((function(s,n,a,e,l,p){var c=Object(t["y"])("router-link");return Object(t["q"])(),Object(t["d"])("div",b,[s.siblingSeriesPost.prev.id?(Object(t["q"])(),Object(t["d"])(c,{key:0,class:"prev-button series-button",to:{name:"PostView",params:{id:s.siblingSeriesPost.prev.id}}},{default:j((function(){return[g,Object(t["f"])(" "+Object(t["A"])(s.siblingSeriesPost.prev.title),1)]})),_:1},8,["to"])):(Object(t["q"])(),Object(t["d"])("div",m)),s.siblingSeriesPost.next.id?(Object(t["q"])(),Object(t["d"])(c,{key:2,class:"next-button series-button",to:{name:"PostView",params:{id:s.siblingSeriesPost.next.id}}},{default:j((function(){return[f,Object(t["f"])(" "+Object(t["A"])(s.siblingSeriesPost.next.title),1)]})),_:1},8,["to"])):(Object(t["q"])(),Object(t["d"])("div",y))])})),w=Object(t["h"])({props:{siblingSeriesPost:Object}});a("ecef");w.render=O,w.__scopeId="data-v-d6aa614c";var v=w},"83f9":function(s){s.exports=JSON.parse('{"content":"<h2 id=\\"leetcode---2-add-two-numbers\\">LeetCode - 2. Add Two Numbers</h2>\\n<p>문제 - <a href=\\"https://leetcode.com/problems/add-two-numbers/\\">LeetCode 2. Add Two Numbers</a></p>\\n<h2 id=\\"문제-설명\\">문제 설명</h2>\\n<p>두 개의 LinkedList가 주어지며, LinkedList는 음수가 아닌 한 자리의 숫자를 저장하는 Node들을 가지며, 해당 숫자들의 역순으로 음수가 아닌 하나의 정수를 표현합니다.\\n<img src=\\"https:/assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg\\" alt=\\"LinkedList Example\\"></p>\\n<p>위 예시의 경우 <code>2-&gt;4-&gt;3</code>으로 저장되는 LinkedList는 <code>342</code>라는 숫자를 표현합니다.</p>\\n<p>동일하게 밑에 있는 <code>5-&gt;6-&gt;4</code>는 <code>465</code>라는 숫자를 표현하게 됩니다. 이때 두 수를 더하여 807이라는 값을 계산한 후 이를 <code>7-&gt;0-&gt;8</code>로 표현되는 LinkedList로 반환하면 됩니다.</p>\\n<p>난이도는 <code>MEDIUM</code> 난이도 입니다.</p>\\n<h2 id=\\"풀이\\">풀이</h2>\\n<h3 id=\\"solution\\">Solution</h3>\\n<p>첫 번째 생각했던 방법은 두 LinkedList에 저장된 숫자들을 각각 완성된 정수값으로 변환하여 덧셈 후 다시 LinkedList 형태로 변환하는 방법입니다.</p>\\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-type\\">int</span> multiplier = <span class=\\"hljs-number\\">0</span>;\\n<span class=\\"hljs-type\\">int</span> numOfl1 = <span class=\\"hljs-number\\">0</span>;\\n<span class=\\"hljs-type\\">int</span> numOfl2 = <span class=\\"hljs-number\\">0</span>;\\n\\n<span class=\\"hljs-keyword\\">for</span> (ListNode* node = l1; node != <span class=\\"hljs-literal\\">nullptr</span> ; node = node-&gt;next)\\n{\\n    numOfl1 += node-&gt;val * <span class=\\"hljs-built_in\\">powl</span>(<span class=\\"hljs-number\\">10</span>, multiplier);\\n    multiplier++;\\n}\\n\\nmultiplier = <span class=\\"hljs-number\\">0</span>;\\n\\n<span class=\\"hljs-keyword\\">for</span> (ListNode* node = l2; node != <span class=\\"hljs-literal\\">nullptr</span> ; node = node-&gt;next)\\n{\\n    numOfl2 += node-&gt;val * <span class=\\"hljs-built_in\\">powl</span>(<span class=\\"hljs-number\\">10</span>, multiplier);\\n    multiplier++;\\n}\\n\\n<span class=\\"hljs-type\\">int</span> add = numOfl1 + numOfl2;\\n\\nListNode* head = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">ListNode</span>(add % <span class=\\"hljs-number\\">10</span>);\\nListNode* result = head;\\n<span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> num = add/<span class=\\"hljs-number\\">10</span>; num &gt; <span class=\\"hljs-number\\">0</span> ; num /= <span class=\\"hljs-number\\">10</span> )\\n{\\n    <span class=\\"hljs-type\\">int</span> digit = num % <span class=\\"hljs-number\\">10</span>;\\n\\n    ListNode* node = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">ListNode</span>(digit);\\n    result-&gt;next = node;\\n\\n    result = node;\\n}\\n\\n<span class=\\"hljs-keyword\\">return</span> head;\\n</code></pre>\\n<p>각각 완성된 정수로 변환 후 덧셈하여 다시 LinkedList로 변환하는 방법이지만, 큰 문제가 하나 발생하하였습니다.</p>\\n<p><img src=\\"/assets/images/leet_code/2.add_two_number/overflow.png\\" alt=\\"overflow\\"></p>\\n<p>코드의 실행 결과 int형의 범위를 넘는 값이 입력된 경우 overflow가 발생해 음수가 되며 Runtime Error가 발생하였습니다.</p>\\n<p>이를 해결하기 위해 두 번째 방법을 사용하였습니다.</p>\\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-type\\">int</span> carry = <span class=\\"hljs-number\\">0</span>;\\n\\nListNode* node1 = l1;\\nListNode* node2 = l2;\\n\\nListNode* head = <span class=\\"hljs-literal\\">nullptr</span>;\\nListNode* lastNode = <span class=\\"hljs-literal\\">nullptr</span>;\\n\\n<span class=\\"hljs-keyword\\">while</span> (node1 != <span class=\\"hljs-literal\\">nullptr</span> || node2 != <span class=\\"hljs-literal\\">nullptr</span>)\\n{\\n    <span class=\\"hljs-type\\">int</span> numOf1 = node1 ? node1-&gt;val : <span class=\\"hljs-number\\">0</span>;\\n    <span class=\\"hljs-type\\">int</span> numOf2 = node2 ? node2-&gt;val : <span class=\\"hljs-number\\">0</span>;\\n\\n    <span class=\\"hljs-type\\">int</span> sum = numOf1 + numOf2 + carry;\\n\\n    carry = sum / <span class=\\"hljs-number\\">10</span>;\\n\\n    ListNode* newNode = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">ListNode</span>(sum % <span class=\\"hljs-number\\">10</span>);\\n\\n    <span class=\\"hljs-keyword\\">if</span> (!head) head = newNode;\\n    <span class=\\"hljs-keyword\\">else</span> lastNode-&gt;next = newNode;\\n\\n    lastNode = newNode;\\n\\n    <span class=\\"hljs-keyword\\">if</span>(node1) node1 = node1-&gt;next;\\n    <span class=\\"hljs-keyword\\">if</span>(node2) node2 = node2-&gt;next;\\n}\\n\\n<span class=\\"hljs-keyword\\">if</span> (carry &gt; <span class=\\"hljs-number\\">0</span>)\\n{\\n    ListNode* node = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">ListNode</span>(carry);\\n    lastNode-&gt;next = node;\\n}\\n</code></pre>\\n<p>int 타입 대신 long, long long과 같은 64bit 타입을 쓴다면 당장의 문제는 해결될지 모르지만, 만약 더 큰 수가 들어온다면 동일한 에러가 발생할 것이 분명합니다.</p>\\n<p>생각을 바꾸어 완성된 정수 값으로 변환하고 더하는 것이 아닌, 한 자리씩 더하여 Node를 생성하고 LinkedList를 형성하면 됩니다.</p>\\n<p>여기서 추가로 신경써주어야 할 부분은 한 자리씩 더한 후에 발생하는 올림(carry)의 경우만 따로 저장해서 다음 자리 수를 더할 때 추가로 더해주면 됩니다.</p>\\n<details>\\n<summary>코드 전문</summary>\\n    \\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Solution</span> {\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\">ListNode* <span class=\\"hljs-title\\">addTwoNumbers</span><span class=\\"hljs-params\\">(ListNode* l1, ListNode* l2)</span> \\n    </span>{\\n        <span class=\\"hljs-type\\">int</span> carry = <span class=\\"hljs-number\\">0</span>;\\n\\n        ListNode* node1 = l1;\\n        ListNode* node2 = l2;\\n\\n        ListNode* head = <span class=\\"hljs-literal\\">nullptr</span>;\\n        ListNode* lastNode = <span class=\\"hljs-literal\\">nullptr</span>;\\n\\n        <span class=\\"hljs-keyword\\">while</span> (node1 != <span class=\\"hljs-literal\\">nullptr</span> || node2 != <span class=\\"hljs-literal\\">nullptr</span>)\\n        {\\n            <span class=\\"hljs-type\\">int</span> numOf1 = node1 ? node1-&gt;val : <span class=\\"hljs-number\\">0</span>;\\n            <span class=\\"hljs-type\\">int</span> numOf2 = node2 ? node2-&gt;val : <span class=\\"hljs-number\\">0</span>;\\n\\n            <span class=\\"hljs-type\\">int</span> sum = numOf1 + numOf2 + carry;\\n\\n            carry = sum / <span class=\\"hljs-number\\">10</span>;\\n\\n            ListNode* newNode = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">ListNode</span>(sum % <span class=\\"hljs-number\\">10</span>);\\n\\n            <span class=\\"hljs-keyword\\">if</span> (!head) head = newNode;\\n            <span class=\\"hljs-keyword\\">else</span> lastNode-&gt;next = newNode;\\n\\n            lastNode = newNode;\\n\\n            <span class=\\"hljs-keyword\\">if</span>(node1) node1 = node1-&gt;next;\\n            <span class=\\"hljs-keyword\\">if</span>(node2) node2 = node2-&gt;next;\\n        }\\n\\n        <span class=\\"hljs-keyword\\">if</span> (carry &gt; <span class=\\"hljs-number\\">0</span>)\\n        {\\n            ListNode* node = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">ListNode</span>(carry);\\n            lastNode-&gt;next = node;\\n        }\\n    \\n        <span class=\\"hljs-keyword\\">return</span> head;\\n    }\\n};\\n</code></pre>\\n</details>\\n\\n<h4 id=\\"제출-결과\\">제출 결과</h4>\\n<p><img src=\\"/assets/images/leet_code/2.add_two_number/result.png\\" alt=\\"Result\\"></p>\\n<p>실행 시간은 28ms, 메모리 사용량은 71.4MB로 측정되었습니다. </p>\\n<p>다른 C++ 제출자보다 80% 좋은 속도를 보여주었다고 되어있는데, 더 빠른 속도의 코드를 확인해보니 거의 다 비슷비슷 한 것 같습니다. 정말 특별하게 최적화를 한 것이 아닌 이상 이정도가 평균일 것 같습니다.</p>\\n"}')},"948d":function(s,n,a){},"9c2e":function(s,n,a){},a050:function(s,n,a){"use strict";a("f4e4")},a682:function(s,n,a){},adc8:function(s,n,a){"use strict";a("1b53")},adeb:function(s,n,a){"use strict";a("1d16")},b4fe:function(s,n,a){"use strict";a("a682")},baca:function(s){s.exports=JSON.parse('{"content":"<h2 id=\\"leetcode---1-two-sum\\">LeetCode - 1. Two Sum</h2>\\n<p>문제 - <a href=\\"https://leetcode.com/problems/two-sum/\\">LeetCode 1. Two Sun</a></p>\\n<h2 id=\\"문제-설명\\">문제 설명</h2>\\n<p>LeetCode의 1번 문제인 Two Sum은 정수형 배열과 target 숫자를 입력받습니다. 그리고 정수형 배열 내 숫자들을 이용해 target 숫자를 만들 수 있는 숫자 2개를 찾아 index를 반환하는 문제입니다.</p>\\n<p>답은 <strong>정확히 하나만</strong> 존재하며 같은 원소는 사용하지 않습니다.</p>\\n<p>난이도는 <code>EASY</code> 난이도 입니다.</p>\\n<h2 id=\\"풀이\\">풀이</h2>\\n<h3 id=\\"solution-1---brute-force\\">Solution 1 - Brute force</h3>\\n<p>첫 번째로 떠올린 방법은 Brute force, 무차별 대입 방법입니다. 단순히 배열을 모두 순회하면서 두 숫자를 더했을 때 target 숫자와 동일한 index 두 개를 찾는 방법입니다.</p>\\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> x = <span class=\\"hljs-number\\">0</span> ; x &lt; nums.<span class=\\"hljs-built_in\\">size</span>() ; x++)\\n{\\n    <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> y = x + <span class=\\"hljs-number\\">1</span> ; y &lt; nums.<span class=\\"hljs-built_in\\">size</span>() ; y++)\\n    {\\n        <span class=\\"hljs-type\\">int</span> sumResult = nums[x] + nums[y];\\n\\n        <span class=\\"hljs-keyword\\">if</span> (target == sumResult)\\n        {\\n            <span class=\\"hljs-keyword\\">return</span> std::vector&lt;<span class=\\"hljs-type\\">int</span>&gt;{x, y};\\n        }\\n    }\\n\\n    <span class=\\"hljs-keyword\\">return</span> std::<span class=\\"hljs-built_in\\">vector</span>&lt;<span class=\\"hljs-type\\">int</span>&gt;();\\n}\\n</code></pre>\\n<p>정말 심플합니다. 단순히 이중 반복문을 이용하여 배열을 순회하면서 하나하나 덧셈하여 target과 동일한 결과의 index를 반환합니다.</p>\\n<p>다만 특별한점이라면 내부의 중첩된 반복문은 <code>x + 1</code>번째부터 시작하는데, 이는 문제에 적혀있던 같은 원소를 사용하지 않기 때문이며 그리고 숫자를 더할 때 <code>x + y</code>나 <code>y + x</code>의 결과는 동일하기 때문에 중복된 case를 수행하지 않게 하기 위함입니다.</p>\\n<h4 id=\\"제출-결과\\">제출 결과</h4>\\n<p><img src=\\"/assets/images/leet_code/two_sum/sol1_result.png\\" alt=\\"Solution 1 result\\"></p>\\n<p>실행 시간은 <code>463ms</code> 메모리는 <code>9.9MB</code>사용하였다. 테스트 케이스가 55개밖에 안되는데 사실상 0.5초가량 걸렸습니다.</p>\\n<p>O(n^2)의 코드이기 때문에 그닥 빠른 알고리즘은 아니란걸 알 수 있습니다.</p>\\n<details>\\n<summary>코드 전문</summary>\\n    \\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;vector&gt;</span></span>\\n<span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;string&gt;</span></span>\\n<span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;tuple&gt;</span></span>\\n\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Solution</span>\\n{\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\">std::vector&lt;<span class=\\"hljs-type\\">int</span>&gt; <span class=\\"hljs-title\\">Answer</span><span class=\\"hljs-params\\">(std::vector&lt;<span class=\\"hljs-type\\">int</span>&gt;&amp; nums, <span class=\\"hljs-type\\">int</span> target)</span>\\n    </span>{\\n        <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> x = <span class=\\"hljs-number\\">0</span> ; x &lt; nums.<span class=\\"hljs-built_in\\">size</span>() ; x++)\\n        {\\n            <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> y = x + <span class=\\"hljs-number\\">1</span> ; y &lt; nums.<span class=\\"hljs-built_in\\">size</span>() ; y++)\\n            {\\n                <span class=\\"hljs-type\\">int</span> sumResult = nums[x] + nums[y];\\n\\n                <span class=\\"hljs-keyword\\">if</span> (target == sumResult)\\n                {\\n                    <span class=\\"hljs-keyword\\">return</span> std::vector&lt;<span class=\\"hljs-type\\">int</span>&gt;{x, y};\\n                }\\n            }\\n        }\\n\\n        <span class=\\"hljs-keyword\\">return</span> std::<span class=\\"hljs-built_in\\">vector</span>&lt;<span class=\\"hljs-type\\">int</span>&gt;();\\n    }\\n};\\n\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-type\\">int</span> <span class=\\"hljs-title\\">main</span><span class=\\"hljs-params\\">(<span class=\\"hljs-type\\">void</span>)</span>\\n</span>{\\n    Solution sol;\\n\\n    std::vector&lt;std::tuple&lt;std::vector&lt;<span class=\\"hljs-type\\">int</span>&gt;, <span class=\\"hljs-type\\">int</span>&gt;&gt; problems {\\n        std::<span class=\\"hljs-built_in\\">make_tuple</span>(std::vector&lt;<span class=\\"hljs-type\\">int</span>&gt;{<span class=\\"hljs-number\\">2</span>, <span class=\\"hljs-number\\">7</span>, <span class=\\"hljs-number\\">11</span>, <span class=\\"hljs-number\\">15</span>}, <span class=\\"hljs-number\\">9</span>),\\n        std::<span class=\\"hljs-built_in\\">make_tuple</span>(std::vector&lt;<span class=\\"hljs-type\\">int</span>&gt;{<span class=\\"hljs-number\\">3</span>, <span class=\\"hljs-number\\">2</span> ,<span class=\\"hljs-number\\">4</span>}, <span class=\\"hljs-number\\">6</span>),\\n        std::<span class=\\"hljs-built_in\\">make_tuple</span>(std::vector&lt;<span class=\\"hljs-type\\">int</span>&gt;{<span class=\\"hljs-number\\">3</span>, <span class=\\"hljs-number\\">3</span>}, <span class=\\"hljs-number\\">6</span>)\\n    };\\n\\n    <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">auto</span> problem : problems)\\n    {\\n        <span class=\\"hljs-keyword\\">auto</span> answer = sol.<span class=\\"hljs-built_in\\">Answer</span>(std::<span class=\\"hljs-built_in\\">get</span>&lt;<span class=\\"hljs-number\\">0</span>&gt;(problem), std::<span class=\\"hljs-built_in\\">get</span>&lt;<span class=\\"hljs-number\\">1</span>&gt;(problem));\\n\\n        <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> num : answer)\\n        {\\n            std::cout &lt;&lt; num &lt;&lt; <span class=\\"hljs-string\\">&quot; &quot;</span>;\\n        }\\n        std::cout &lt;&lt; std::endl;\\n    }\\n\\n}\\n</code></pre>\\n</details>\\n\\n<h3 id=\\"solution-2---hash-table\\">Solution 2 - Hash table</h3>\\n<p><img src=\\"/assets/images/leet_code/two_sum/follow_up.png\\" alt=\\"Follow-up\\"></p>\\n<p>첫 번째 해결책은 O(n^2)의 코드이므로 이보다 더 빠른 해결책을 제시해보겠습니다.</p>\\n<p>첫 번째 방법의 문제점은 중첩된 반복문의 사용이며, 하나의 x를 정해 target에 맞는 y를 계속 찾는 방법입니다. 즉, 반복문이 돌며 x가 바뀌면 이전에 계산했던 모든 <code>x + y</code>의 계산 결과는 없어지며 새로운 x를 정해 다시 y를 찾아가는 여행을 떠나야 되게 됩니다.</p>\\n<p>여기서 생각을 바꾸어 이전에 나왔던 x를 별도의 메모리에 저장하여 <code>diff = target - x</code>를 수행하여 <code>diff</code>에 해당 하는 값이 이전에 등장한 적이 있다면 <code>diff + x = target</code>이 되므로 결국 diff와 x의 index를 반환하면 됩니다. 이렇게 되면 순회가 단 한번만 발생하니 O(n)이 됩니다.</p>\\n<p>그런데 여기서 또 발생하는 문제점은 x를 메모리에 저장한 후에 diff와 동일한 값을 찾을 때 저장한 공간을 순회해야 합니다. 만약 1차원 배열이라면 O(n)의 순회 시간이 발생할 것이며 즉, 결국 O(n^2)랑 차이가 없게되죠.</p>\\n<p>이를 해결하기 위해 일반 배열이 아닌 Hash Table을 사용합니다. Hash table은 Hash 함수를 key를 hash화 하여 저장할 index를 계산해 저장하는 방식이기 때문에 탐색과 삽입이 O(1)이 됩니다.</p>\\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-comment\\">//                num, index</span>\\nstd::unordered_map&lt;<span class=\\"hljs-type\\">int</span>, <span class=\\"hljs-type\\">int</span>&gt; table;\\n\\n<span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> x = <span class=\\"hljs-number\\">0</span> ; x &lt; nums.<span class=\\"hljs-built_in\\">size</span>() ; x++)\\n{\\n    <span class=\\"hljs-type\\">int</span> diff = target - nums[x];\\n\\n    <span class=\\"hljs-keyword\\">auto</span> search = table.<span class=\\"hljs-built_in\\">find</span>(diff);\\n    <span class=\\"hljs-keyword\\">if</span> (search != table.<span class=\\"hljs-built_in\\">end</span>())\\n    {\\n        <span class=\\"hljs-keyword\\">return</span> std::vector&lt;<span class=\\"hljs-type\\">int</span>&gt;{x, search-&gt;second};\\n    }\\n\\n    table.<span class=\\"hljs-built_in\\">insert</span>(std::<span class=\\"hljs-built_in\\">make_pair</span>(nums[x], x));\\n}\\n\\n<span class=\\"hljs-keyword\\">return</span> std::<span class=\\"hljs-built_in\\">vector</span>&lt;<span class=\\"hljs-type\\">int</span>&gt;();\\n</code></pre>\\n<p>C++의 <a href=\\"https://en.cppreference.com/w/cpp/container/unordered_map\\">unordered_map</a>은 key-value형태의 컨테이너이며 상수 시간내에 삽입, 삭제, 탐색, 비교가 이루어지는 자료구조 즉, Hash table입니다.</p>\\n<p>먼저 <code>diff = target - nums[x]</code>를 통해 target에 x를 빼면 남는 값 diff가 이미 등장한 적이 있는지 확인합니다.\\n만약 있다면 등장했었던 그 값의 index와 현재 x의 index를 반환하기만 하면 됩니다.</p>\\n<p>매우 간단하지만, 기존의 O(n^2) 코드에 비교하면 O(n)이므로 속도 향상이 매우 많이 이루어졌을 것이라고 생각됩니다.</p>\\n<h4 id=\\"제출-결과-1\\">제출 결과</h4>\\n<p><img src=\\"/assets/images/leet_code/two_sum/sol2_result.png\\" alt=\\"Solution 2 result\\"></p>\\n<p>기존의 약 <code>500ms</code>의 속도에서 <code>7ms</code>의 속도로 70배 가까이 향상되었습니다. 다만 별도의 저장 공간을 사용했기에 메모리의 크기가 <code>9.9MB</code>에서 <code>10.7MB</code>로 증가했습니다.</p>\\n<details>\\n    <summary>코드 전문</summary>\\n\\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;vector&gt;</span></span>\\n<span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;string&gt;</span></span>\\n<span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;tuple&gt;</span></span>\\n<span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;unordered_map&gt;</span></span>\\n\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Solution</span>\\n{\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\">std::vector&lt;<span class=\\"hljs-type\\">int</span>&gt; <span class=\\"hljs-title\\">Answer</span><span class=\\"hljs-params\\">(std::vector&lt;<span class=\\"hljs-type\\">int</span>&gt;&amp; nums, <span class=\\"hljs-type\\">int</span> target)</span>\\n    </span>{\\n        <span class=\\"hljs-comment\\">//                num, index</span>\\n        std::unordered_map&lt;<span class=\\"hljs-type\\">int</span>, <span class=\\"hljs-type\\">int</span>&gt; table;\\n\\n        <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> x = <span class=\\"hljs-number\\">0</span> ; x &lt; nums.<span class=\\"hljs-built_in\\">size</span>() ; x++)\\n        {\\n            <span class=\\"hljs-type\\">int</span> diff = target - nums[x];\\n\\n            <span class=\\"hljs-keyword\\">auto</span> search = table.<span class=\\"hljs-built_in\\">find</span>(diff);\\n            <span class=\\"hljs-keyword\\">if</span> (search != table.<span class=\\"hljs-built_in\\">end</span>())\\n            {\\n                <span class=\\"hljs-keyword\\">return</span> std::vector&lt;<span class=\\"hljs-type\\">int</span>&gt;{x, search-&gt;second};\\n            }\\n\\n            table.<span class=\\"hljs-built_in\\">insert</span>(std::<span class=\\"hljs-built_in\\">make_pair</span>(nums[x], x));\\n        }\\n\\n        <span class=\\"hljs-keyword\\">return</span> std::<span class=\\"hljs-built_in\\">vector</span>&lt;<span class=\\"hljs-type\\">int</span>&gt;();\\n    }\\n};\\n\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-type\\">int</span> <span class=\\"hljs-title\\">main</span><span class=\\"hljs-params\\">(<span class=\\"hljs-type\\">void</span>)</span>\\n</span>{\\n    Solution sol;\\n\\n    std::vector&lt;std::tuple&lt;std::vector&lt;<span class=\\"hljs-type\\">int</span>&gt;, <span class=\\"hljs-type\\">int</span>&gt;&gt; problems {\\n        std::<span class=\\"hljs-built_in\\">make_tuple</span>(std::vector&lt;<span class=\\"hljs-type\\">int</span>&gt;{<span class=\\"hljs-number\\">2</span>, <span class=\\"hljs-number\\">7</span>, <span class=\\"hljs-number\\">11</span>, <span class=\\"hljs-number\\">15</span>}, <span class=\\"hljs-number\\">9</span>),\\n        std::<span class=\\"hljs-built_in\\">make_tuple</span>(std::vector&lt;<span class=\\"hljs-type\\">int</span>&gt;{<span class=\\"hljs-number\\">3</span>, <span class=\\"hljs-number\\">2</span> ,<span class=\\"hljs-number\\">4</span>}, <span class=\\"hljs-number\\">6</span>),\\n        std::<span class=\\"hljs-built_in\\">make_tuple</span>(std::vector&lt;<span class=\\"hljs-type\\">int</span>&gt;{<span class=\\"hljs-number\\">3</span>, <span class=\\"hljs-number\\">3</span>}, <span class=\\"hljs-number\\">6</span>)\\n    };\\n\\n    <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">auto</span> problem : problems)\\n    {\\n        <span class=\\"hljs-keyword\\">auto</span> answer = sol.<span class=\\"hljs-built_in\\">Answer</span>(std::<span class=\\"hljs-built_in\\">get</span>&lt;<span class=\\"hljs-number\\">0</span>&gt;(problem), std::<span class=\\"hljs-built_in\\">get</span>&lt;<span class=\\"hljs-number\\">1</span>&gt;(problem));\\n\\n        <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> num : answer)\\n        {\\n            std::cout &lt;&lt; num &lt;&lt; <span class=\\"hljs-string\\">&quot; &quot;</span>;\\n        }\\n        std::cout &lt;&lt; std::endl;\\n    }\\n\\n}\\n</code></pre>\\n</details>"}')},cba4:function(s){s.exports=JSON.parse('{"1":{"id":1,"name":"Leet Code","posts":[1,2,3]},"2":{"id":2,"name":"easy","posts":[1]},"3":{"id":3,"name":"c++","posts":[1,2,3]},"4":{"id":4,"name":"medium","posts":[2,3]}}')},cd49:function(s,n,a){"use strict";a.r(n);a("e260"),a("e6cf"),a("cca6"),a("a79d");var t=a("7a23");function e(s,n,a,e,l,p){var c=Object(t["y"])("Header"),r=Object(t["y"])("router-view"),o=Object(t["y"])("Footer");return Object(t["q"])(),Object(t["d"])(t["a"],null,[Object(t["g"])(c),Object(t["g"])(r),Object(t["g"])(o)],64)}var l=a("3617"),p=Object(t["h"])({components:{Header:l["c"],Footer:l["b"]}});a("dcd8");p.render=e;var c=p,r=(a("d3b7"),a("3ca3"),a("ddb0"),a("6c02")),o=a("f7e2"),i=Object(t["F"])("data-v-1e6c83f9");Object(t["t"])("data-v-1e6c83f9");var d={class:"home"};Object(t["r"])();var u=i((function(s,n,a,e,l,p){var c=Object(t["y"])("post-list"),r=Object(t["y"])("ContentWithSideMenu");return Object(t["q"])(),Object(t["d"])(r,null,{default:i((function(){return[s.postFilter.type?(Object(t["q"])(),Object(t["d"])("div",{key:0,class:[s.postFilter.type,"post-filter"]},[Object(t["g"])("p",null,Object(t["A"])(s.selectedFilterName),1)],2)):Object(t["e"])("",!0),Object(t["g"])("main",d,[Object(t["g"])(c,{filter:s.postFilter},null,8,["filter"])])]})),_:1})})),h=(a("b0c0"),a("58a7")),j=Object(t["F"])("data-v-0e07973f");Object(t["t"])("data-v-0e07973f");var b={class:"post-item card"},g={key:0,class:"thumbnail"},m={class:"content"},f={class:"info"},y={class:"post-title"},O={key:0,class:"post-summery"};Object(t["r"])();var w=j((function(s,n,a,e,l,p){var c=Object(t["y"])("SeriesButton"),r=Object(t["y"])("FormattedDate"),o=Object(t["y"])("TagsView"),i=Object(t["y"])("router-link");return Object(t["q"])(),Object(t["d"])(i,{to:{name:"PostView",params:{id:s.post.uid}}},{default:j((function(){return[Object(t["g"])("div",b,[s.post.thumbnail?(Object(t["q"])(),Object(t["d"])("div",g,[Object(t["g"])("img",{src:s.post.thumbnail},null,8,["src"])])):Object(t["e"])("",!0),Object(t["g"])("div",m,[Object(t["g"])("div",f,[Object(t["g"])("h1",y,[Object(t["f"])(Object(t["A"])(s.post.title)+" ",1),s.post.series?(Object(t["q"])(),Object(t["d"])(c,{key:0,series:s.post.series},null,8,["series"])):Object(t["e"])("",!0)]),Object(t["g"])(r,{date:s.post.date},null,8,["date"]),s.post.tags.length>0?(Object(t["q"])(),Object(t["d"])(o,{key:0,class:"tags",tags:s.post.tags},null,8,["tags"])):Object(t["e"])("",!0)]),s.post.summery?(Object(t["q"])(),Object(t["d"])("p",O,Object(t["A"])(s.post.summery),1)):Object(t["e"])("",!0)])])]})),_:1},8,["to"])})),v=a("7e73"),_=Object(t["h"])({name:"PostItem",components:{TagsView:v["c"],SeriesButton:v["a"],FormattedDate:l["a"]},props:{post:{type:Object,required:!0}}});a("ceb9");_.render=w,_.__scopeId="data-v-0e07973f";var k=_,L=Object(t["F"])("data-v-7e2fd040");Object(t["t"])("data-v-7e2fd040");var x={class:"post-list"};Object(t["r"])();var N=L((function(s,n,a,e,l,p){var c=Object(t["y"])("post-item");return Object(t["q"])(),Object(t["d"])("div",x,[(Object(t["q"])(!0),Object(t["d"])(t["a"],null,Object(t["w"])(s.posts,(function(s){return Object(t["q"])(),Object(t["d"])(c,{class:"post-item",key:s.uid,post:s},null,8,["post"])})),128))])})),S=(a("4de4"),Object(t["h"])({name:"PostList",props:{filter:{type:Object}},components:{PostItem:k},setup:function(s){var n=Object(t["i"])(),a=null===n||void 0===n?void 0:n.appContext.config.globalProperties.$postLoader,e=Object(t["b"])((function(){var n;return null!==(n=s.filter)&&void 0!==n&&n.type?a.GetRecentPosts(-1,0,s.filter):a.GetRecentPosts(-1)}));return{posts:e}}}));a("f9f1");S.render=N,S.__scopeId="data-v-7e2fd040";var q=S,M=Object(t["h"])({name:"Home",components:{PostList:q,ContentWithSideMenu:h["a"]},setup:function(){var s=Object(r["c"])(),n=Object(t["u"])({type:"",id:-1}),a=function(s){if(s){var a=s.series,t=s.tag,e=a?"series":t?"tag":"",l=a?parseInt(a):t?parseInt(t):-1;n.type=e,n.id=l}};a(s.query),Object(t["D"])((function(){return s.query}),a);var e=Object(t["i"])(),l=null===e||void 0===e?void 0:e.appContext.config.globalProperties.$postLoader,p=Object(t["b"])((function(){return"series"===n.type?l.seriesMetadata[n.id].name:"tag"===n.type?l.tagsMetadata[n.id].name:""}));return{postFilter:n,selectedFilterName:p}}});a("3715");M.render=u,M.__scopeId="data-v-1e6c83f9";var P=M,F=a("3e94"),C=a.n(F),I=Object(t["F"])("data-v-19c80930");Object(t["t"])("data-v-19c80930");var z={class:"about"},A=Object(t["g"])("div",{class:"card content"},[Object(t["g"])("p",null,"곧 주인장에 대한 설명과 이력 등등이 추가될 예정입니다."),Object(t["g"])("br"),Object(t["g"])("p",null,"추가될 때 까지 귀여운 고양이를 드립니다."),Object(t["g"])("img",{src:C.a})],-1);Object(t["r"])();var T=I((function(s,n){return Object(t["q"])(),Object(t["d"])("div",z,[A])}));a("4eaf");const B={};B.render=T,B.__scopeId="data-v-19c80930";var E=B,D=Object(t["F"])("data-v-62d5e77b");Object(t["t"])("data-v-62d5e77b");var H={class:"page-not-found"},R=Object(t["g"])("p",null,"404",-1),J=Object(t["g"])("p",null,"Page Not Found",-1);Object(t["r"])();var Y=D((function(s,n){return Object(t["q"])(),Object(t["d"])("div",H,[R,J])}));a("a050");const G={};G.render=Y,G.__scopeId="data-v-62d5e77b";var V=G,W=Object(t["F"])("data-v-6f490642");Object(t["t"])("data-v-6f490642");var U={class:"error"},$=Object(t["g"])("p",null,"Error!",-1);Object(t["r"])();var K=W((function(s,n){return Object(t["q"])(),Object(t["d"])("div",U,[$])}));a("adeb");const Q={};Q.render=K,Q.__scopeId="data-v-6f490642";var X=Q,Z=[{path:"/",name:"Home",component:P},{path:"/about",name:"About",component:E},{path:"/post/:id(\\d+)",name:"PostView",component:function(){return a.e("post_view").then(a.bind(null,"7afb"))}},{path:"/:pathMatch(.*)*",name:"NotFound",component:V},{path:"/error",name:"Error",component:X}],ss=Object(r["a"])({history:Object(r["b"])("/"),routes:Z,scrollBehavior:function(s,n,a){return a||(s.hash?{el:s.hash,behavior:"smooth"}:{top:0})}});Object(o["b"])(ss);var ns=ss,as=a("d4ec"),ts=a("bee2"),es=(a("4e82"),a("caad"),a("2532"),a("d81d"),a("fb6a"),a("7db0"),a("c740"),a("5a0c")),ls=a.n(es),ps=function(){function s(n,a){var t,e=this;Object(as["a"])(this,s),this._nextPostId=null,this._prevPostId=null;var l=a.postMetadatas.find((function(s){return s.uid===n}));if(!l)throw new Error("Faild to find post metadata by id");var p=null!==(t=a.seriesMetadata[l.series])&&void 0!==t?t:null,c=l.tags.map((function(s){return a.tagsMetadata[s]}));if(this.postMeta=l,this.seriesMeta=p,this.tagsMeta=c,this.seriesMeta){var r,o,i=this.seriesMeta.posts.findIndex((function(s){return s===e.uid}));this._nextPostId=null!==(r=this.seriesMeta.posts[i+1])&&void 0!==r?r:null,this._prevPostId=null!==(o=this.seriesMeta.posts[i-1])&&void 0!==o?o:null}}return Object(ts["a"])(s,[{key:"uid",get:function(){return this.postMeta.uid}},{key:"title",get:function(){return this.postMeta.title}},{key:"date",get:function(){return ls()(this.postMeta.date)}},{key:"thumbnail",get:function(){return this.postMeta.thumbnail}},{key:"summery",get:function(){return this.postMeta.summery}},{key:"series",get:function(){return this.seriesMeta}},{key:"tags",get:function(){return this.tagsMeta}},{key:"postContent",get:function(){var s=a("e003")("./".concat(this.postMeta.htmlFileName));return s.content}},{key:"nextSeriesId",get:function(){return this._nextPostId}},{key:"prevSeriesId",get:function(){return this._prevPostId}}]),s}(),cs=function(){function s(){Object(as["a"])(this,s),this._postMetadatas=a("14b9"),this._seriesMetadata=a("fb39"),this._tagsMetadata=a("cba4")}return Object(ts["a"])(s,[{key:"postMetadatas",get:function(){return this._postMetadatas}},{key:"seriesMetadata",get:function(){return this._seriesMetadata}},{key:"tagsMetadata",get:function(){return this._tagsMetadata}},{key:"GetRecentPosts",value:function(){var s=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,e=this.postMetadatas.sort((function(s,n){return s.date==n.date?0:s.date>n.date?-1:1}));return t&&(e=e.filter((function(s){return"series"==t.type?t.id===s.series:"tag"==t.type?s.tags.includes(t.id):void 0}))),-1==n?e.map((function(n){return new ps(n.uid,s)})):e.slice(a,n).map((function(n){return new ps(n.uid,s)}))}},{key:"GetPostById",value:function(s){try{var n=new ps(s,this);return n}catch(a){return console.log(a),null}}}]),s}();a("f20b");ls.a.locale("ko");var rs=Object(t["c"])(c);rs.config.globalProperties.$postLoader=new cs,rs.use(ns).use(o["a"],{property:{id:"G-BLG37NTK4J"}}).mount("#app")},ceb9:function(s,n,a){"use strict";a("edd8")},dcd8:function(s,n,a){"use strict";a("5e6b")},e003:function(s,n,a){var t={"./2021-10-24-leet_code_1":"baca","./2021-10-24-leet_code_1.json":"baca","./2021-10-26-leet_code_2":"83f9","./2021-10-26-leet_code_2.json":"83f9","./2021-10-27-leet_code_3":"6bc8","./2021-10-27-leet_code_3.json":"6bc8"};function e(s){var n=l(s);return a(n)}function l(s){if(!a.o(t,s)){var n=new Error("Cannot find module '"+s+"'");throw n.code="MODULE_NOT_FOUND",n}return t[s]}e.keys=function(){return Object.keys(t)},e.resolve=l,s.exports=e,e.id="e003"},e1c4:function(s,n,a){s.exports=a.p+"img/귀여운_고양이_1.dfb645d4.jpg"},ea47:function(s,n,a){s.exports=a.p+"img/profile_image.d79e9dd8.png"},ecef:function(s,n,a){"use strict";a("eeac")},edd8:function(s,n,a){},eeac:function(s,n,a){},f4e4:function(s,n,a){},f9f1:function(s,n,a){"use strict";a("948d")},fb39:function(s){s.exports=JSON.parse('{"1":{"id":1,"name":"LeetCode","posts":[1,2,3]}}')}});
//# sourceMappingURL=app.3d40fb13.js.map
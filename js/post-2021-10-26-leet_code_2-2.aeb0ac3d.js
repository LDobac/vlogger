(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["post-2021-10-26-leet_code_2-2"],{"83f9":function(s){s.exports=JSON.parse('{"content":"<h2 id=\\"leetcode---2-add-two-numbers\\">LeetCode - 2. Add Two Numbers</h2>\\n<p>문제 - <a href=\\"https://leetcode.com/problems/add-two-numbers/\\">LeetCode 2. Add Two Numbers</a></p>\\n<h2 id=\\"문제-설명\\">문제 설명</h2>\\n<p>두 개의 LinkedList가 주어지며, LinkedList는 음수가 아닌 한 자리의 숫자를 저장하는 Node들을 가지며, 해당 숫자들의 역순으로 음수가 아닌 하나의 정수를 표현합니다.\\n<img src=\\"https:/assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg\\" alt=\\"LinkedList Example\\"></p>\\n<p>위 예시의 경우 <code>2-&gt;4-&gt;3</code>으로 저장되는 LinkedList는 <code>342</code>라는 숫자를 표현합니다.</p>\\n<p>동일하게 밑에 있는 <code>5-&gt;6-&gt;4</code>는 <code>465</code>라는 숫자를 표현하게 됩니다. 이때 두 수를 더하여 807이라는 값을 계산한 후 이를 <code>7-&gt;0-&gt;8</code>로 표현되는 LinkedList로 반환하면 됩니다.</p>\\n<p>난이도는 <code>MEDIUM</code> 난이도 입니다.</p>\\n<h2 id=\\"풀이\\">풀이</h2>\\n<h3 id=\\"solution\\">Solution</h3>\\n<p>첫 번째 생각했던 방법은 두 LinkedList에 저장된 숫자들을 각각 완성된 정수값으로 변환하여 덧셈 후 다시 LinkedList 형태로 변환하는 방법입니다.</p>\\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-type\\">int</span> multiplier = <span class=\\"hljs-number\\">0</span>;\\n<span class=\\"hljs-type\\">int</span> numOfl1 = <span class=\\"hljs-number\\">0</span>;\\n<span class=\\"hljs-type\\">int</span> numOfl2 = <span class=\\"hljs-number\\">0</span>;\\n\\n<span class=\\"hljs-keyword\\">for</span> (ListNode* node = l1; node != <span class=\\"hljs-literal\\">nullptr</span> ; node = node-&gt;next)\\n{\\n    numOfl1 += node-&gt;val * <span class=\\"hljs-built_in\\">powl</span>(<span class=\\"hljs-number\\">10</span>, multiplier);\\n    multiplier++;\\n}\\n\\nmultiplier = <span class=\\"hljs-number\\">0</span>;\\n\\n<span class=\\"hljs-keyword\\">for</span> (ListNode* node = l2; node != <span class=\\"hljs-literal\\">nullptr</span> ; node = node-&gt;next)\\n{\\n    numOfl2 += node-&gt;val * <span class=\\"hljs-built_in\\">powl</span>(<span class=\\"hljs-number\\">10</span>, multiplier);\\n    multiplier++;\\n}\\n\\n<span class=\\"hljs-type\\">int</span> add = numOfl1 + numOfl2;\\n\\nListNode* head = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">ListNode</span>(add % <span class=\\"hljs-number\\">10</span>);\\nListNode* result = head;\\n<span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> num = add/<span class=\\"hljs-number\\">10</span>; num &gt; <span class=\\"hljs-number\\">0</span> ; num /= <span class=\\"hljs-number\\">10</span> )\\n{\\n    <span class=\\"hljs-type\\">int</span> digit = num % <span class=\\"hljs-number\\">10</span>;\\n\\n    ListNode* node = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">ListNode</span>(digit);\\n    result-&gt;next = node;\\n\\n    result = node;\\n}\\n\\n<span class=\\"hljs-keyword\\">return</span> head;\\n</code></pre>\\n<p>각각 완성된 정수로 변환 후 덧셈하여 다시 LinkedList로 변환하는 방법이지만, 큰 문제가 하나 발생하하였습니다.</p>\\n<p><img src=\\"/assets/images/leet_code/2.add_two_number/overflow.png\\" alt=\\"overflow\\"></p>\\n<p>코드의 실행 결과 int형의 범위를 넘는 값이 입력된 경우 overflow가 발생해 음수가 되며 Runtime Error가 발생하였습니다.</p>\\n<p>이를 해결하기 위해 두 번째 방법을 사용하였습니다.</p>\\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-type\\">int</span> carry = <span class=\\"hljs-number\\">0</span>;\\n\\nListNode* node1 = l1;\\nListNode* node2 = l2;\\n\\nListNode* head = <span class=\\"hljs-literal\\">nullptr</span>;\\nListNode* lastNode = <span class=\\"hljs-literal\\">nullptr</span>;\\n\\n<span class=\\"hljs-keyword\\">while</span> (node1 != <span class=\\"hljs-literal\\">nullptr</span> || node2 != <span class=\\"hljs-literal\\">nullptr</span>)\\n{\\n    <span class=\\"hljs-type\\">int</span> numOf1 = node1 ? node1-&gt;val : <span class=\\"hljs-number\\">0</span>;\\n    <span class=\\"hljs-type\\">int</span> numOf2 = node2 ? node2-&gt;val : <span class=\\"hljs-number\\">0</span>;\\n\\n    <span class=\\"hljs-type\\">int</span> sum = numOf1 + numOf2 + carry;\\n\\n    carry = sum / <span class=\\"hljs-number\\">10</span>;\\n\\n    ListNode* newNode = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">ListNode</span>(sum % <span class=\\"hljs-number\\">10</span>);\\n\\n    <span class=\\"hljs-keyword\\">if</span> (!head) head = newNode;\\n    <span class=\\"hljs-keyword\\">else</span> lastNode-&gt;next = newNode;\\n\\n    lastNode = newNode;\\n\\n    <span class=\\"hljs-keyword\\">if</span>(node1) node1 = node1-&gt;next;\\n    <span class=\\"hljs-keyword\\">if</span>(node2) node2 = node2-&gt;next;\\n}\\n\\n<span class=\\"hljs-keyword\\">if</span> (carry &gt; <span class=\\"hljs-number\\">0</span>)\\n{\\n    ListNode* node = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">ListNode</span>(carry);\\n    lastNode-&gt;next = node;\\n}\\n</code></pre>\\n<p>int 타입 대신 long, long long과 같은 64bit 타입을 쓴다면 당장의 문제는 해결될지 모르지만, 만약 더 큰 수가 들어온다면 동일한 에러가 발생할 것이 분명합니다.</p>\\n<p>생각을 바꾸어 완성된 정수 값으로 변환하고 더하는 것이 아닌, 한 자리씩 더하여 Node를 생성하고 LinkedList를 형성하면 됩니다.</p>\\n<p>여기서 추가로 신경써주어야 할 부분은 한 자리씩 더한 후에 발생하는 올림(carry)의 경우만 따로 저장해서 다음 자리 수를 더할 때 추가로 더해주면 됩니다.</p>\\n<details>\\n<summary>코드 전문</summary>\\n    \\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Solution</span> {\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\">ListNode* <span class=\\"hljs-title\\">addTwoNumbers</span><span class=\\"hljs-params\\">(ListNode* l1, ListNode* l2)</span> \\n    </span>{\\n        <span class=\\"hljs-type\\">int</span> carry = <span class=\\"hljs-number\\">0</span>;\\n\\n        ListNode* node1 = l1;\\n        ListNode* node2 = l2;\\n\\n        ListNode* head = <span class=\\"hljs-literal\\">nullptr</span>;\\n        ListNode* lastNode = <span class=\\"hljs-literal\\">nullptr</span>;\\n\\n        <span class=\\"hljs-keyword\\">while</span> (node1 != <span class=\\"hljs-literal\\">nullptr</span> || node2 != <span class=\\"hljs-literal\\">nullptr</span>)\\n        {\\n            <span class=\\"hljs-type\\">int</span> numOf1 = node1 ? node1-&gt;val : <span class=\\"hljs-number\\">0</span>;\\n            <span class=\\"hljs-type\\">int</span> numOf2 = node2 ? node2-&gt;val : <span class=\\"hljs-number\\">0</span>;\\n\\n            <span class=\\"hljs-type\\">int</span> sum = numOf1 + numOf2 + carry;\\n\\n            carry = sum / <span class=\\"hljs-number\\">10</span>;\\n\\n            ListNode* newNode = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">ListNode</span>(sum % <span class=\\"hljs-number\\">10</span>);\\n\\n            <span class=\\"hljs-keyword\\">if</span> (!head) head = newNode;\\n            <span class=\\"hljs-keyword\\">else</span> lastNode-&gt;next = newNode;\\n\\n            lastNode = newNode;\\n\\n            <span class=\\"hljs-keyword\\">if</span>(node1) node1 = node1-&gt;next;\\n            <span class=\\"hljs-keyword\\">if</span>(node2) node2 = node2-&gt;next;\\n        }\\n\\n        <span class=\\"hljs-keyword\\">if</span> (carry &gt; <span class=\\"hljs-number\\">0</span>)\\n        {\\n            ListNode* node = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">ListNode</span>(carry);\\n            lastNode-&gt;next = node;\\n        }\\n    \\n        <span class=\\"hljs-keyword\\">return</span> head;\\n    }\\n};\\n</code></pre>\\n</details>\\n\\n<h4 id=\\"제출-결과\\">제출 결과</h4>\\n<p><img src=\\"/assets/images/leet_code/2.add_two_number/result.png\\" alt=\\"Result\\"></p>\\n<p>실행 시간은 28ms, 메모리 사용량은 71.4MB로 측정되었습니다. </p>\\n<p>다른 C++ 제출자보다 80% 좋은 속도를 보여주었다고 되어있는데, 더 빠른 속도의 코드를 확인해보니 거의 다 비슷비슷 한 것 같습니다. 정말 특별하게 최적화를 한 것이 아닌 이상 이정도가 평균일 것 같습니다.</p>\\n"}')}}]);
//# sourceMappingURL=post-2021-10-26-leet_code_2-2.aeb0ac3d.js.map
"use strict";(self["webpackChunkvlogger"]=self["webpackChunkvlogger"]||[]).push([[436],{8327:function(s){s.exports=JSON.parse('{"content":"<h2 id=\\"leetcode---8-string-to-integer-atoi\\">LeetCode - 8. String to Integer (atoi)</h2>\\n<p>문제 - <a href=\\"https://leetcode.com/problems/string-to-integer-atoi/\\">LeetCode 8. String to Integer (atoi)</a></p>\\n<h2 id=\\"문제-설명\\">문제 설명</h2>\\n<p>문자열에서 정수형으로 parse하는 atoi 함수를 구현하는 문제입니다.</p>\\n<p>문자열에서 정수형으로 변환할 때 지켜야할 여러 규칙이 존재합니다.</p>\\n<ol>\\n<li>공백 문자는 모두 무시한다.</li>\\n<li>&#39;-&#39;, &#39;+&#39; 문자가 처음으로 등장하고 이미 등장한적이 없다면 각 부호가 정수의 부호를 결정합니다. 만약 어떠한 부호도 등장하지 않았다면 양수로 가정합니다.</li>\\n<li>숫자 문자가 아닌 문자가 등장하면 남은 모든 문자는 무시합니다.</li>\\n<li>숫자 문자는 정수형으로 변환합니다. 만약 숫자가 아니라면 정수 값은 0으로 결정됩니다.</li>\\n<li>만약 정수형 범위를 벗어난다면 정수형 범위의 최대,최소 값을 반환합니다.</li>\\n</ol>\\n<p>난이도는 <code>MEDIUM</code> 난이도 입니다.</p>\\n<h2 id=\\"풀이\\">풀이</h2>\\n<h3 id=\\"solution\\">Solution</h3>\\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> index = <span class=\\"hljs-number\\">0</span>; index &lt; s.<span class=\\"hljs-built_in\\">size</span>() ; index++)\\n{\\n    <span class=\\"hljs-type\\">char</span> chr = s[index];\\n    \\n    ...\\n}\\n</code></pre>\\n<p>먼저 문자열을 순회합니다.</p>\\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-keyword\\">if</span> ((chr &lt; <span class=\\"hljs-string\\">&#x27;0&#x27;</span> || chr &gt; <span class=\\"hljs-string\\">&#x27;9&#x27;</span>) &amp;&amp; !((result == <span class=\\"hljs-number\\">0</span>) &amp;&amp; (chr == <span class=\\"hljs-string\\">&#x27;+&#x27;</span> || chr == <span class=\\"hljs-string\\">&#x27;-&#x27;</span>)))\\n{\\n    <span class=\\"hljs-keyword\\">if</span> (result == <span class=\\"hljs-number\\">0</span> &amp;&amp; !(chr == <span class=\\"hljs-string\\">&#x27;+&#x27;</span> || chr == <span class=\\"hljs-string\\">&#x27;-&#x27;</span> || chr == <span class=\\"hljs-string\\">&#x27; &#x27;</span>)) <span class=\\"hljs-keyword\\">break</span>;\\n    <span class=\\"hljs-keyword\\">if</span> (chr == <span class=\\"hljs-string\\">&#x27;.&#x27;</span>) <span class=\\"hljs-keyword\\">break</span>;\\n\\n    <span class=\\"hljs-keyword\\">if</span> (findSign) <span class=\\"hljs-keyword\\">break</span>;\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">continue</span>;\\n}\\n</code></pre>\\n<p>순회시 숫자 문자가 아니거나, 이미 부호가 결정되었을 때 -, + 문자가 탐색되는 경우를 처리합니다.</p>\\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-keyword\\">if</span> (chr == <span class=\\"hljs-string\\">&#x27;+&#x27;</span>) \\n{\\n    <span class=\\"hljs-keyword\\">if</span> (findSign) <span class=\\"hljs-keyword\\">break</span>;\\n    neg = <span class=\\"hljs-literal\\">false</span>;\\n    findSign = <span class=\\"hljs-literal\\">true</span>;\\n}\\n<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span> (chr == <span class=\\"hljs-string\\">&#x27;-&#x27;</span>) \\n{\\n    <span class=\\"hljs-keyword\\">if</span> (findSign) <span class=\\"hljs-keyword\\">break</span>;\\n    neg = <span class=\\"hljs-literal\\">true</span>;\\n    findSign = <span class=\\"hljs-literal\\">true</span>;\\n}\\n<span class=\\"hljs-keyword\\">else</span> \\n{\\n    <span class=\\"hljs-type\\">int</span> num = (neg ? -(chr - <span class=\\"hljs-string\\">&#x27;0&#x27;</span>) : (chr - <span class=\\"hljs-string\\">&#x27;0&#x27;</span>));\\n    <span class=\\"hljs-keyword\\">if</span> (result &gt; INT_MAX/<span class=\\"hljs-number\\">10</span> || (result == INT_MAX / <span class=\\"hljs-number\\">10</span> &amp;&amp; num &gt; <span class=\\"hljs-number\\">7</span>)) <span class=\\"hljs-keyword\\">return</span> INT_MAX;\\n    <span class=\\"hljs-keyword\\">if</span> (result &lt; INT_MIN/<span class=\\"hljs-number\\">10</span> || (result == INT_MIN / <span class=\\"hljs-number\\">10</span> &amp;&amp; num &lt; <span class=\\"hljs-number\\">-8</span>)) <span class=\\"hljs-keyword\\">return</span> INT_MIN;\\n\\n    findSign = <span class=\\"hljs-literal\\">true</span>;\\n    result *= <span class=\\"hljs-number\\">10</span>;\\n    result = result + num;\\n}\\n</code></pre>\\n<p>부호 문자라면 부호를 결정하고, 숫자라면 수를 계산하여 result 변수에 저장합니다.</p>\\n<h4 id=\\"제출-결과\\">제출 결과</h4>\\n<p><img src=\\"/assets/images/leet_code/8/result.png\\" alt=\\"Solution 1 result\\"></p>\\n<p>0ms의 실행 결과가 나왔습니다.</p>\\n<details>\\n<summary>코드 전문</summary>\\n    \\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;string&gt;</span></span>\\n<span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;climits&gt;</span></span>\\n\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Solution</span> \\n{\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-type\\">int</span> <span class=\\"hljs-title\\">myAtoi</span><span class=\\"hljs-params\\">(std::string s)</span> \\n    </span>{\\n        <span class=\\"hljs-keyword\\">if</span> (!s.<span class=\\"hljs-built_in\\">size</span>()) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>;\\n\\n        <span class=\\"hljs-type\\">int</span> result = <span class=\\"hljs-number\\">0</span>;\\n        <span class=\\"hljs-type\\">bool</span> neg = <span class=\\"hljs-literal\\">false</span>;\\n        <span class=\\"hljs-type\\">bool</span> findSign = <span class=\\"hljs-literal\\">false</span>;\\n\\n        <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> i = s.<span class=\\"hljs-built_in\\">size</span>() - <span class=\\"hljs-number\\">1</span>; i &gt;= <span class=\\"hljs-number\\">0</span> ; i--)\\n        {\\n            <span class=\\"hljs-type\\">int</span> index = s.<span class=\\"hljs-built_in\\">size</span>() - i - <span class=\\"hljs-number\\">1</span>;\\n            <span class=\\"hljs-type\\">char</span> chr = s[index];\\n\\n            <span class=\\"hljs-keyword\\">if</span> ((chr &lt; <span class=\\"hljs-string\\">&#x27;0&#x27;</span> || chr &gt; <span class=\\"hljs-string\\">&#x27;9&#x27;</span>) &amp;&amp; !((result == <span class=\\"hljs-number\\">0</span>) &amp;&amp; (chr == <span class=\\"hljs-string\\">&#x27;+&#x27;</span> || chr == <span class=\\"hljs-string\\">&#x27;-&#x27;</span>)))\\n            {\\n                <span class=\\"hljs-keyword\\">if</span> (result == <span class=\\"hljs-number\\">0</span> &amp;&amp; !(chr == <span class=\\"hljs-string\\">&#x27;+&#x27;</span> || chr == <span class=\\"hljs-string\\">&#x27;-&#x27;</span> || chr == <span class=\\"hljs-string\\">&#x27; &#x27;</span>)) <span class=\\"hljs-keyword\\">break</span>;\\n                <span class=\\"hljs-keyword\\">if</span> (chr == <span class=\\"hljs-string\\">&#x27;.&#x27;</span>) <span class=\\"hljs-keyword\\">break</span>;\\n\\n                <span class=\\"hljs-keyword\\">if</span> (findSign) <span class=\\"hljs-keyword\\">break</span>;\\n                <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">continue</span>;\\n            }\\n\\n            <span class=\\"hljs-keyword\\">if</span> (chr == <span class=\\"hljs-string\\">&#x27;+&#x27;</span>) \\n            {\\n                <span class=\\"hljs-keyword\\">if</span> (findSign) <span class=\\"hljs-keyword\\">break</span>;\\n                neg = <span class=\\"hljs-literal\\">false</span>;\\n                findSign = <span class=\\"hljs-literal\\">true</span>;\\n            }\\n            <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span> (chr == <span class=\\"hljs-string\\">&#x27;-&#x27;</span>) \\n            {\\n                <span class=\\"hljs-keyword\\">if</span> (findSign) <span class=\\"hljs-keyword\\">break</span>;\\n                neg = <span class=\\"hljs-literal\\">true</span>;\\n                findSign = <span class=\\"hljs-literal\\">true</span>;\\n            }\\n            <span class=\\"hljs-keyword\\">else</span> \\n            {\\n                <span class=\\"hljs-type\\">int</span> num = (neg ? -(chr - <span class=\\"hljs-string\\">&#x27;0&#x27;</span>) : (chr - <span class=\\"hljs-string\\">&#x27;0&#x27;</span>));\\n                <span class=\\"hljs-keyword\\">if</span> (result &gt; INT_MAX/<span class=\\"hljs-number\\">10</span> || (result == INT_MAX / <span class=\\"hljs-number\\">10</span> &amp;&amp; num &gt; <span class=\\"hljs-number\\">7</span>)) <span class=\\"hljs-keyword\\">return</span> INT_MAX;\\n                <span class=\\"hljs-keyword\\">if</span> (result &lt; INT_MIN/<span class=\\"hljs-number\\">10</span> || (result == INT_MIN / <span class=\\"hljs-number\\">10</span> &amp;&amp; num &lt; <span class=\\"hljs-number\\">-8</span>)) <span class=\\"hljs-keyword\\">return</span> INT_MIN;\\n\\n                findSign = <span class=\\"hljs-literal\\">true</span>;\\n                result *= <span class=\\"hljs-number\\">10</span>;\\n                result = result + num;\\n            }\\n        }\\n\\n        <span class=\\"hljs-keyword\\">return</span> result;\\n    }\\n};\\n</code></pre>\\n</details>\\n"}')}}]);
"use strict";(self["webpackChunkvlogger"]=self["webpackChunkvlogger"]||[]).push([[275],{237:function(s){s.exports=JSON.parse('{"content":"<h2 id=\\"leetcode---12-integer-to-roman\\">LeetCode - 12. Integer to Roman</h2>\\n<p>문제 - <a href=\\"https://leetcode.com/problems/integer-to-roman/\\">LeetCode 12. Integer to Roman</a></p>\\n<h2 id=\\"문제-설명\\">문제 설명</h2>\\n<p>정수형 숫자가 입력되면 해당 숫자를 로마자 숫자로 변환하는 문제입니다.</p>\\n<p>또한, 수의 범위는 <code>1 &lt;= x &lt;= 3999</code> 사이로만 입력됩니다.</p>\\n<p>난이도는 <code>MEDIUM</code> 난이도 입니다.</p>\\n<h2 id=\\"풀이\\">풀이</h2>\\n<h3 id=\\"solution\\">Solution</h3>\\n<p>난이도에 비해 문제가 쉽기 때문에 큰 설명은 필요하지 않을 듯 합니다.</p>\\n<p>이번에 푸는 방식은 수의 범위가 넓지 않기에 if 문을 활용해 10의 배수에 따라 적절한 문자로 치환하는 방식을 사용하였지만, 필요에 따라 테이블 형태의 자료형에 저장하여 참조하는 방식으로 구현해도 될 듯 합니다.</p>\\n<h4 id=\\"제출-결과\\">제출 결과</h4>\\n<p><img src=\\"/assets/images/leet_code/12/result.webp\\" alt=\\"Solution 1 result\\"></p>\\n<details>\\n<summary>코드 전문</summary>\\n    \\n<pre><code class=\\"language-c++\\"><span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;string&gt;</span></span>\\n\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Solution</span> \\n{\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\">std::string <span class=\\"hljs-title\\">intToRoman</span><span class=\\"hljs-params\\">(<span class=\\"hljs-type\\">int</span> num)</span> \\n    </span>{\\n        std::string result = <span class=\\"hljs-string\\">&quot;&quot;</span>;\\n\\n        <span class=\\"hljs-type\\">int</span> multiple = <span class=\\"hljs-number\\">0</span>;\\n        <span class=\\"hljs-keyword\\">while</span> (num &gt; <span class=\\"hljs-number\\">0</span>)\\n        {\\n            <span class=\\"hljs-type\\">int</span> digit = num % <span class=\\"hljs-number\\">10</span>;\\n\\n            std::string one = <span class=\\"hljs-string\\">&quot;I&quot;</span>;\\n            std::string four = <span class=\\"hljs-string\\">&quot;IV&quot;</span>;\\n            std::string five = <span class=\\"hljs-string\\">&quot;V&quot;</span>;\\n            std::string nine = <span class=\\"hljs-string\\">&quot;IX&quot;</span>;\\n\\n            <span class=\\"hljs-keyword\\">if</span> (multiple == <span class=\\"hljs-number\\">1</span>)\\n            {\\n                one = <span class=\\"hljs-string\\">&quot;X&quot;</span>;\\n                four = <span class=\\"hljs-string\\">&quot;XL&quot;</span>;\\n                five = <span class=\\"hljs-string\\">&quot;L&quot;</span>;\\n                nine = <span class=\\"hljs-string\\">&quot;XC&quot;</span>;\\n            }\\n            <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span> (multiple == <span class=\\"hljs-number\\">2</span>)\\n            {\\n                one = <span class=\\"hljs-string\\">&quot;C&quot;</span>;\\n                four = <span class=\\"hljs-string\\">&quot;CD&quot;</span>;\\n                five = <span class=\\"hljs-string\\">&quot;D&quot;</span>;\\n                nine = <span class=\\"hljs-string\\">&quot;CM&quot;</span>;\\n            }\\n            <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span> (multiple == <span class=\\"hljs-number\\">3</span>)\\n            {   \\n                one = <span class=\\"hljs-string\\">&quot;M&quot;</span>;\\n            }\\n\\n            <span class=\\"hljs-keyword\\">if</span> (digit == <span class=\\"hljs-number\\">4</span>) result.<span class=\\"hljs-built_in\\">insert</span>(<span class=\\"hljs-number\\">0</span>, four);\\n            <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span> (digit == <span class=\\"hljs-number\\">9</span>) result.<span class=\\"hljs-built_in\\">insert</span>(<span class=\\"hljs-number\\">0</span>, nine);\\n            <span class=\\"hljs-keyword\\">else</span>\\n            {\\n                std::string tmp = <span class=\\"hljs-string\\">&quot;&quot;</span>;\\n\\n                <span class=\\"hljs-keyword\\">if</span> (digit &gt;= <span class=\\"hljs-number\\">5</span>)\\n                {\\n                    tmp += five;\\n                    digit -= <span class=\\"hljs-number\\">5</span>;\\n                }\\n\\n                <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> i = <span class=\\"hljs-number\\">0</span>; i &lt; digit; i++)\\n                {\\n                    tmp += one;\\n                }\\n                \\n                result.<span class=\\"hljs-built_in\\">insert</span>(<span class=\\"hljs-number\\">0</span>, tmp);\\n            }\\n\\n            multiple++;\\n            num /= <span class=\\"hljs-number\\">10</span>;\\n        }\\n\\n        <span class=\\"hljs-keyword\\">return</span> result;\\n    }\\n};\\n</code></pre>\\n</details>\\n"}')}}]);